(window.webpackJsonp=window.webpackJsonp||[]).push([[356],{729:function(t,a,s){"use strict";s.r(a);var v=s(10),_=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"map集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map集合"}},[t._v("#")]),t._v(" map集合")]),t._v(" "),a("p",[t._v("键值对（key value pair）数据集合的特点：键不可重复")]),t._v(" "),a("p",[t._v("map集合专门用于存储多个键值对数据。")]),t._v(" "),a("p",[t._v("在map出现之前，我们使用的是对象的方式来存储键值对，键是属性名，值是属性值。")]),t._v(" "),a("p",[t._v("使用对象存储有以下问题：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("键名只能是字符串")])]),t._v(" "),a("li",[a("p",[t._v("获取数据的数量不方便")])]),t._v(" "),a("li",[a("p",[t._v("键名容易跟原型上的名称冲突")])]),t._v(" "),a("li",[a("p",[t._v("如何创建map")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建一个空的map")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建一个具有初始内容的map，初始内容来自于可迭代对象每一次迭代的结果，但是，它要求每一次迭代的结果必须是一个长度为2的数组，数组第一项表示键，数组的第二项表示值")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("如何进行后续操作")])]),t._v(" "),a("ul",[a("li",[t._v("size：只读属性，获取当前map中键的数量")]),t._v(" "),a("li",[t._v("set(键, 值)：设置一个键值对，键和值可以是任何类型\n"),a("ul",[a("li",[t._v("如果键不存在，则添加一项")]),t._v(" "),a("li",[t._v("如果键已存在，则修改它的值")]),t._v(" "),a("li",[t._v("比较键的方式和set相同")])])]),t._v(" "),a("li",[t._v("get(键): 根据一个键得到对应的值")]),t._v(" "),a("li",[t._v("has(键)：判断某个键是否存在")]),t._v(" "),a("li",[t._v("delete(键)：删除指定的键")]),t._v(" "),a("li",[t._v("clear(): 清空map")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("和数组互相转换")])]),t._v(" "),a("p",[t._v("和set一样")]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("遍历")])]),t._v(" "),a("ul",[a("li",[t._v("for-of，每次迭代得到的是一个长度为2的数组")]),t._v(" "),a("li",[t._v("forEach，通过回调函数遍历\n"),a("ul",[a("li",[t._v("参数1：每一项的值")]),t._v(" "),a("li",[t._v("参数2：每一项的键")]),t._v(" "),a("li",[t._v("参数3：map本身")])])])])])}),[],!1,null,null,null);a.default=_.exports}}]);