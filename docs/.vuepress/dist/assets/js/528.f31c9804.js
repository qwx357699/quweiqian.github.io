(window.webpackJsonp=window.webpackJsonp||[]).push([[528],{898:function(n,s,e){"use strict";e.r(s);var v=e(10),a=Object(v.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"包配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包配置"}},[n._v("#")]),n._v(" 包配置")]),n._v(" "),s("p",[n._v("目前遇到的问题：")]),n._v(" "),s("ol",[s("li",[n._v("拷贝工程后如何还原？")]),n._v(" "),s("li",[n._v("如何区分开发依赖和生产依赖？")]),n._v(" "),s("li",[n._v("如果自身的项目也是一个包，如何描述包的信息")])]),n._v(" "),s("p",[n._v("以上这些问题都需要通过包的"),s("strong",[n._v("配置文件")]),n._v("解决")]),n._v(" "),s("h2",{attrs:{id:"配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[n._v("#")]),n._v(" 配置文件")]),n._v(" "),s("p",[n._v("npm 将每个使用 npm 的工程本身都看作是一个包，包的信息需要通过一个名称固定的配置文件来描述")]),n._v(" "),s("p",[s("strong",[n._v("配置文件的名称固定为：package.json")])]),n._v(" "),s("p",[n._v("可以手动创建该文件，而更多的时候，是通过命令"),s("code",[n._v("npm init")]),n._v("创建的")]),n._v(" "),s("p",[n._v("配置文件中可以描述大量的信息，包括：")]),n._v(" "),s("ul",[s("li",[n._v("name：包的名称，该名称必须是"),s("strong",[n._v("英文单词字符")]),n._v("，支持连接符")]),n._v(" "),s("li",[n._v("version：版本\n"),s("ul",[s("li",[n._v("版本规范：主版本号.次版本号.补丁版本号")]),n._v(" "),s("li",[n._v("主版本号：仅当程序发生了重大变化时才会增长，如新增了重要功能、新增了大量的API、技术架构发生了重大变化")]),n._v(" "),s("li",[n._v("次版本号：仅当程序发生了一些小变化时才会增长，如新增了一些小功能、新增了一些辅助型的API")]),n._v(" "),s("li",[n._v("补丁版本号：仅当解决了一些 bug 或 进行了一些局部优化时更新，如修复了某个函数的 bug、提升了某个函数的运行效率")])])]),n._v(" "),s("li",[n._v("description：包的描述")]),n._v(" "),s("li",[n._v("homepage：官网地址")]),n._v(" "),s("li",[n._v("author：包的作者，必须是有效的 npm 账户名，书写规范是 "),s("code",[n._v("account <mail>")]),n._v("，例如："),s("code",[n._v("zhangsan <zhangsan@gmail.com>")]),n._v("，不正确的账号和邮箱可能导致发布包时失败")]),n._v(" "),s("li",[n._v("repository：包的仓储地址，通常指 git 或 svn 的地址，它是一个对象\n"),s("ul",[s("li",[n._v("type：仓储类型，git 或 svn")]),n._v(" "),s("li",[n._v("url：地址")])])]),n._v(" "),s("li",[n._v("main：包的入口文件，使用包的人默认从该入口文件导入包的内容")]),n._v(" "),s("li",[n._v("keywords: 搜索关键字，发布包后，可以通过该数组中的关键字搜索到包")]),n._v(" "),s("li",[n._v("dependencies 下载某个包时，会去读取该包的这个字段，找到其他依赖，不读Devdependencies字段")])]),n._v(" "),s("p",[n._v("使用"),s("code",[n._v("npm init --yes")]),n._v("或"),s("code",[n._v("npm init -y")]),n._v("可以在生成配置文件时自动填充默认配置")]),n._v(" "),s("h2",{attrs:{id:"保存依赖关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#保存依赖关系"}},[n._v("#")]),n._v(" 保存依赖关系")]),n._v(" "),s("p",[n._v("大部分时候，我们仅仅是开发项目，并不会把它打包发布出去，尽管如此，我们仍然需要package.json文件")]),n._v(" "),s("p",[s("strong",[n._v("package.json文件最重要的作用，是记录当前工程的依赖")])]),n._v(" "),s("ul",[s("li",[n._v("dependencies：生产环境的依赖包（简单来说凡是"),s("strong",[n._v("我们打包后的代码要用到的依赖")]),n._v("称为"),s("strong",[n._v("生产环境的依赖")]),n._v("）")]),n._v(" "),s("li",[n._v("devDependencies：仅开发环境的依赖包")])]),n._v(" "),s("p",[n._v("配置好依赖后，使用下面的命令即可安装依赖")]),n._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("## 本地安装所有依赖 dependencies + devDependencies")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("npm")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("install")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("npm")]),n._v(" i\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("## 仅安装生产环境的依赖 dependencies")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("npm")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("install")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[n._v("--production")]),n._v("  \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("## 安装的包的依赖就是只下载生产环境依赖也就是 dependencies 字段的依赖")]),n._v("\n")])])]),s("p",[n._v("这样一来，代码移植就不是问题了，只需要移植源代码和package.json文件，不用移植node_modules目录，然后在移植之后通过命令即可重新恢复安装")]),n._v(" "),s("p",[n._v("为了更加方便的添加依赖，npm支持在使用install命令时，加入一些额外的参数，用于将安装的依赖包保存到package.json文件中")]),n._v(" "),s("p",[n._v("涉及的命令如下")]),n._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("## 安装依赖到生产环境")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("npm")]),n._v(" i 包名\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("npm")]),n._v(" i "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[n._v("--save")]),n._v(" 包名\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("npm")]),n._v(" i "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[n._v("-S")]),n._v(" 包名\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("## 安装依赖到开发环境")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("npm")]),n._v(" i --save-dev 包名\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("npm")]),n._v(" i "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[n._v("-D")]),n._v(" 包名\n")])])]),s("blockquote",[s("p",[n._v("自动保存的依赖版本，例如"),s("code",[n._v("^15.1.3")]),n._v("，这种书写方式叫做语义版本号（semver version），具体规则后续讲解")])])])}),[],!1,null,null,null);s.default=a.exports}}]);