(window.webpackJsonp=window.webpackJsonp||[]).push([[462],{830:function(s,t,a){"use strict";a.r(t);var n=a(10),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"运行环境配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行环境配置"}},[s._v("#")]),s._v(" 运行环境配置")]),s._v(" "),t("p",[s._v("我们书写的代码一般有三种运行环境：")]),s._v(" "),t("ol",[t("li",[s._v("开发环境")]),s._v(" "),t("li",[s._v("生产环境")]),s._v(" "),t("li",[s._v("测试环境")])]),s._v(" "),t("p",[s._v("有的时候，我们可能需要在 node 代码中根据不同的环境做出不同的处理")]),s._v(" "),t("p",[s._v("如何优雅的让 node 知道处于什么环境，是极其重要的")]),s._v(" "),t("p",[s._v("通常我们使用如下的处理方式：")]),s._v(" "),t("p",[s._v("node中有一个全局变量 global (可以类比浏览器环境的window)，该变量是一个对象，对象中的所有属性均可以直接使用")]),s._v(" "),t("p",[s._v("global有一个属性是process，该属性是一个对象，包含了当前运行node程序的计算机的很多信息，其中有一个信息是env，是一个对象，包含了计算机中所有的系统变量")]),s._v(" "),t("p",[s._v("通常，我们通过系统变量 NODE_ENV 的值，来判定node程序处于何种环境")]),s._v(" "),t("p",[s._v("有两种方式设置 NODE_ENV 的值")]),s._v(" "),t("ol",[t("li",[s._v("永久设置")]),s._v(" "),t("li",[s._v("临时设置")])]),s._v(" "),t("p",[s._v("我们一般使用临时设置")]),s._v(" "),t("p",[s._v("因此，我们可以配置 scripts 脚本，在设置好了 NODE_ENV 后启动程序")]),s._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"scripts"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// set 是windows系统设置临时变量的命令，&& 表示命令的连接，把上一个命令运行成功，成功后运行下一个命令，这两个命令就合并成了一个命令。上一个设置了环境变量，因此下一个就能读取了。")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 注意&& 左侧不能有空格，否则process.env.NODE_ENV的值多一个空格。同理等号左右两侧也不能有空格。")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"start"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"set NODE_ENV=development&& node ./index.js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"build"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"set NODE_ENV=production&& node ./index.js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"test"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"set NODE_ENV=test&& node ./index.js"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n")])])]),t("blockquote",[t("p",[s._v("为了避免不同系统的设置方式的差异，可以使用第三方库 cross-env 对环境变量进行设置("),t("em",[s._v("譬如windows set 命令在mac系统使用的是 export")]),s._v(")")]),s._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"scripts"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1. set 换成 cross-env,需要安装 npm install cross-env --save-dev")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//2. && 需要删除，否则报错")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"start"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cross-env NODE_ENV=development   node ./index.js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"build"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cross-env NODE_ENV=production node ./index.js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"test"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cross-env NODE_ENV=test node ./index.js"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n")])])])]),s._v(" "),t("h2",{attrs:{id:"在node中读取package-json"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在node中读取package-json"}},[s._v("#")]),s._v(" 在node中读取package.json")]),s._v(" "),t("p",[s._v("有的时候，我们可能在 package.json 中配置一些自定义的字段，这些字段需要在node中读取")]),s._v(" "),t("p",[s._v("在node 中骚操作，可以直接导入一个json格式的文件(文件后缀名.json)，它会自动将其转换为js对象。因此 package.json 经常有些奇怪的字段，只是为了供读取的。")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" config "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./package.json"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// .json可以省略不写,有同名js，js文件优先")]),s._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("config"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);