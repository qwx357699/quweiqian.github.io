(window.webpackJsonp=window.webpackJsonp||[]).push([[281],{657:function(t,a,s){"use strict";s.r(a);var n=s(10),v=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"垃圾回收与内存泄漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收与内存泄漏"}},[t._v("#")]),t._v(" 垃圾回收与内存泄漏")]),t._v(" "),a("h2",{attrs:{id:"经典真题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#经典真题"}},[t._v("#")]),t._v(" 经典真题")]),t._v(" "),a("ul",[a("li",[t._v("请介绍一下 "),a("em",[t._v("JavaScript")]),t._v(" 中的垃圾回收站机制")])]),t._v(" "),a("h2",{attrs:{id:"什么是内存泄露"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是内存泄露"}},[t._v("#")]),t._v(" 什么是内存泄露")]),t._v(" "),a("p",[t._v("程序的运行需要内存。只要程序提出要求，操作系统或者运行时（"),a("em",[t._v("runtime")]),t._v("）就必须供给内存。")]),t._v(" "),a("p",[t._v("对于持续运行的服务进程（"),a("em",[t._v("daemon")]),t._v("），必须及时释放不再用到的内存。否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃。")]),t._v(" "),a("p",[t._v("也就是说，不再用到的内存，如果没有及时释放，就叫做内存泄漏（"),a("em",[t._v("memory leak")]),t._v("）。")]),t._v(" "),a("h2",{attrs:{id:"javascript-中的垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-中的垃圾回收"}},[t._v("#")]),t._v(" "),a("em",[t._v("JavaScript")]),t._v(" 中的垃圾回收")]),t._v(" "),a("p",[t._v("浏览器的 "),a("em",[t._v("Javascript")]),t._v(" 具有自动垃圾回收机制（"),a("em",[t._v("GC")]),t._v("："),a("em",[t._v("Garbage Collecation")]),t._v("），也就是说，执行环境会负责管理代码执行过程中使用的内存。其原理是："),a("strong",[t._v("垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存")]),t._v("。")]),t._v(" "),a("p",[t._v("但是这个过程不是实时的，因为其开销比较大并且 "),a("em",[t._v("GC")]),t._v(" 时停止响应其他操作，所以垃圾回收器会按照固定的时间间隔周期性的执行。")]),t._v(" "),a("p",[t._v("不再使用的变量也就是生命周期结束的变量，当然只可能是局部变量，全局变量的生命周期直至浏览器卸载页面才会结束。局部变量只在函数的执行过程中存在，而在这个过程中会为局部变量在栈或堆上分配相应的空间，以存储它们的值，然后在函数中使用这些变量，直至函数结束，而闭包中由于内部函数的原因，外部函数并不能算是结束。")]),t._v(" "),a("p",[t._v("下面是一段示例代码：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zhangsan'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zhangsan'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在上面的代码中，我们首先声明了两个函数，分别叫做 "),a("em",[t._v("fn1")]),t._v(" 和 "),a("em",[t._v("fn2")]),t._v("。")]),t._v(" "),a("p",[t._v("当 "),a("em",[t._v("fn1")]),t._v(" 被调用时，进入 "),a("em",[t._v("fn1")]),t._v(" 的环境，会开辟一块内存存放对象 "),a("em",[t._v("{name: 'zhangsan', age: 10}")]),t._v("。而当调用结束后，出了 "),a("em",[t._v("fn1")]),t._v(" 的环境，那么该块内存会被  "),a("em",[t._v("JavaScript")]),t._v(" 引擎中的垃圾回收器自动释放；")]),t._v(" "),a("p",[t._v("在 "),a("em",[t._v("fn2")]),t._v(" 被调用的过程中，返回的对象被全局变量 "),a("em",[t._v("b")]),t._v(" 所指向，所以该块内存并不会被释放。")]),t._v(" "),a("p",[t._v("这里问题就出现了：到底哪个变量是没有用的？")]),t._v(" "),a("p",[t._v("所以垃圾收集器必须跟踪到底哪个变量没用，对于不再有用的变量打上标记，以备将来收回其内存。")]),t._v(" "),a("p",[t._v("用于标记的无用变量的策略可能因实现而有所区别，通常情况下有两种实现方式："),a("strong",[t._v("标记清除")]),t._v("和"),a("strong",[t._v("引用计数")]),t._v("。")]),t._v(" "),a("p",[t._v("引用计数不太常用，标记清除较为常用。")]),t._v(" "),a("h2",{attrs:{id:"标记清除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记清除"}},[t._v("#")]),t._v(" 标记清除")]),t._v(" "),a("p",[a("em",[t._v("JavaScript")]),t._v(" 中最常用的垃圾回收方式就是标记清除。")]),t._v(" "),a("p",[t._v("当变量进入环境时，例如，在函数中声明一个变量，就将这个变量标记为“进入环境”。")]),t._v(" "),a("p",[t._v("从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。")]),t._v(" "),a("p",[t._v("而当变量离开环境时，则将其标记为“离开环境”。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 被标记 ，进入环境 ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 被标记 ，进入环境")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行完毕 之后 a、b 又被标离开环境，被回收。")]),t._v("\n")])])]),a("p",[t._v("垃圾回收器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方式）。")]),t._v(" "),a("p",[t._v("然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记（闭包）。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。")]),t._v(" "),a("p",[t._v("最后，垃圾回收器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。")]),t._v(" "),a("p",[t._v("到目前为止，"),a("em",[t._v("IE9+、Firefox、Opera、Chrome、Safari")]),t._v(" 的 "),a("em",[t._v("JS")]),t._v(" 实现使用的都是标记清除的垃圾回收策略或类似的策略，只不过垃圾收集的时间间隔互不相同。")]),t._v(" "),a("h2",{attrs:{id:"引用计数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用计数"}},[t._v("#")]),t._v(" 引用计数")]),t._v(" "),a("p",[t._v("引用计数的含义是跟踪记录每个值被引用的次数。")]),t._v(" "),a("p",[t._v("当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是 "),a("em",[t._v("1")]),t._v("。如果同一个值又被赋给另一个变量，则该值的引用次数加 "),a("em",[t._v("1")]),t._v("。")]),t._v(" "),a("p",[t._v("相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减 "),a("em",[t._v("1")]),t._v("。当这个值的引用次数变成 "),a("em",[t._v("0")]),t._v(" 时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。")]),t._v(" "),a("p",[t._v("这样，当垃圾回收器下次再运行时，它就会释放那些引用次数为 "),a("em",[t._v("0")]),t._v(" 的值所占用的内存。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a 指向对象的引用次数为 1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a 指向对象的引用次数加 1，为 2")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a 指向对象的引用次数再加 1，为 3")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a 指向对象的引用次数减 1，为 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("em",[t._v("Netscape Navigator3")]),t._v(" 是最早使用引用计数策略的浏览器，但很快它就遇到一个严重的问题："),a("strong",[t._v("循环引用")]),t._v("。")]),t._v(" "),a("p",[t._v("循环引用指的是对象 "),a("em",[t._v("A")]),t._v(" 中包含一个指向对象B的指针，而对象 "),a("em",[t._v("B")]),t._v(" 中也包含一个指向对象 "),a("em",[t._v("A")]),t._v(" 的引用。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pro "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pro "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("以上代码 "),a("em",[t._v("a")]),t._v(" 和 "),a("em",[t._v("b")]),t._v(" 的引用次数都是 "),a("em",[t._v("2")]),t._v("，"),a("em",[t._v("fn")]),t._v(" 执行完毕后，两个对象都已经离开环境，在标记清除方式下是没有问题的，但是在引用计数策略下，因为 "),a("em",[t._v("a")]),t._v(" 和 "),a("em",[t._v("b")]),t._v(" 的引用次数不为 "),a("em",[t._v("0")]),t._v("，所以不会被垃圾回收器回收内存，如果 "),a("em",[t._v("fn")]),t._v(" 函数被大量调用，就会造成内存泄露。在 "),a("em",[t._v("IE7")]),t._v(" 与 "),a("em",[t._v("IE8")]),t._v(" 上，内存直线上升。")]),t._v(" "),a("h2",{attrs:{id:"真题解答"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#真题解答"}},[t._v("#")]),t._v(" 真题解答")]),t._v(" "),a("ul",[a("li",[t._v("请介绍一下 "),a("em",[t._v("JavaScript")]),t._v(" 中的垃圾回收站机制")])]),t._v(" "),a("blockquote",[a("p",[t._v("参考答案：")]),t._v(" "),a("p",[a("em",[t._v("JavaScript")]),t._v(" 具有自动垃圾回收机制。垃圾收集器会按照固定的时间间隔周期性的执行。")]),t._v(" "),a("p",[a("em",[t._v("JavaScript")]),t._v(" 常见的垃圾回收方式："),a("strong",[t._v("标记清除")]),t._v("、"),a("strong",[t._v("引用计数")]),t._v("方式。")]),t._v(" "),a("p",[t._v("1、标记清除方式：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("工作原理：当变量进入环境时，将这个变量标记为“进入环境”。当变量离开环境时，则将其标记为“离开环境”。标记“离开环境”的就回收内存。")])]),t._v(" "),a("li",[a("p",[t._v("工作流程：")])]),t._v(" "),a("li",[a("p",[t._v("垃圾回收器，在运行的时候会给存储在内存中的所有变量都加上标记；")])]),t._v(" "),a("li",[a("p",[t._v("去掉环境中的变量以及被环境中的变量引用的变量的标记；")])]),t._v(" "),a("li",[a("p",[t._v("被加上标记的会被视为准备删除的变量；")])]),t._v(" "),a("li",[a("p",[t._v("垃圾回收器完成内存清理工作，销毁那些带标记的值并回收他们所占用的内存空间。")])])]),t._v(" "),a("p",[t._v("2、引用计数方式：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("工作原理：跟踪记录每个值被引用的次数。")])]),t._v(" "),a("li",[a("p",[t._v("工作流程：")])]),t._v(" "),a("li",[a("p",[t._v("声明了一个变量并将一个引用类型的值赋值给这个变量，这个引用类型值的引用次数就是 "),a("em",[t._v("1")]),t._v("；")])]),t._v(" "),a("li",[a("p",[t._v("同一个值又被赋值给另一个变量，这个引用类型值的引用次数加 "),a("em",[t._v("1")]),t._v("；")])]),t._v(" "),a("li",[a("p",[t._v("当包含这个引用类型值的变量又被赋值成另一个值了，那么这个引用类型值的引用次数减 "),a("em",[t._v("1")]),t._v("；")])]),t._v(" "),a("li",[a("p",[t._v("当引用次数变成 "),a("em",[t._v("0")]),t._v(" 时，说明没办法访问这个值了；")])]),t._v(" "),a("li",[a("p",[t._v("当垃圾收集器下一次运行时，它就会释放引用次数是 "),a("em",[t._v("0")]),t._v(" 的值所占的内存。")])])])]),t._v(" "),a("p",[t._v("-"),a("em",[t._v("EOF")]),t._v("-")])])}),[],!1,null,null,null);a.default=v.exports}}]);