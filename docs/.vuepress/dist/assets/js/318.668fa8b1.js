(window.webpackJsonp=window.webpackJsonp||[]).push([[318],{686:function(t,s,a){"use strict";a.r(s);var n=a(10),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"proxy-代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#proxy-代理"}},[t._v("#")]),t._v(" Proxy 代理")]),t._v(" "),s("p",[t._v("代理：提供了修改底层实现的方式")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代理一个目标对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//target：目标对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//handler：是一个普通对象，其中可以重写底层实现")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回一个代理对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proxy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("blockquote",[s("p",[s("strong",[t._v("handler 配置的选项和 Reflect 的方法一一对应，就是重写 Reflect 提供的方法，也就是重写底层实现。")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);