(window.webpackJsonp=window.webpackJsonp||[]).push([[610],{981:function(t,s,a){"use strict";a.r(s);var n=a(10),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"扩展类型-枚举"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展类型-枚举"}},[t._v("#")]),t._v(" 扩展类型-枚举")]),t._v(" "),s("blockquote",[s("p",[t._v("扩展类型：类型别名、枚举、接口、类")])]),t._v(" "),s("p",[t._v("枚举通常用于约束某个变量的取值范围。")]),t._v(" "),s("p",[t._v("字面量和联合类型配合使用，也可以达到同样的目标。")]),t._v(" "),s("h1",{attrs:{id:"字面量类型的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字面量类型的问题"}},[t._v("#")]),t._v(" 字面量类型的问题")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("在类型约束位置，会产生重复代码。可以使用类型别名解决该问题。")])]),t._v(" "),s("li",[s("p",[t._v("逻辑含义和真实的值产生了混淆，会导致当修改真实值的时候，产生大量的修改。\n举例解释：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("type Gender "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"帅哥"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"美女"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先生 女士 男 女 male female")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果一改动，代码到处都要改")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("searchUsers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("g")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Gender")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("g "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"帅哥"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("字面量类型不会进入到编译结果。")])])]),t._v(" "),s("h1",{attrs:{id:"枚举"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[t._v("#")]),t._v(" 枚举")]),t._v(" "),s("p",[t._v("如何定义一个枚举：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("enum 枚举名{\n    枚举字段1 = 值1,\n    枚举字段2 = 值2,\n    ...\n}\n")])])]),s("p",[t._v("枚举会出现在编译结果中，编译结果中表现为对象。")]),t._v(" "),s("p",[t._v("枚举的规则：")]),t._v(" "),s("ul",[s("li",[t._v("枚举的字段值可以是字符串或数字")]),t._v(" "),s("li",[t._v("数字枚举的值会自动自增")]),t._v(" "),s("li",[t._v("被数字枚举约束的变量，可以直接赋值为数字")]),t._v(" "),s("li",[t._v("数字枚举的编译结果 和 字符串枚举有差异")])]),t._v(" "),s("p",[t._v("最佳实践：")]),t._v(" "),s("ul",[s("li",[t._v("尽量不要在一个枚举中既出现字符串字段，又出现数字字段")]),t._v(" "),s("li",[t._v("使用枚举时，尽量使用枚举字段的名称，而不使用真实的值")])])])}),[],!1,null,null,null);s.default=e.exports}}]);