(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{319:function(s,t,a){s.exports=a.p+"assets/img/wps1.fbb26ed5.jpg"},320:function(s,t,a){s.exports=a.p+"assets/img/wps2.32435924.jpg"},321:function(s,t,a){s.exports=a.p+"assets/img/wps3.b9ac37f8.jpg"},322:function(s,t,a){s.exports=a.p+"assets/img/wps4.8e6125ff.jpg"},323:function(s,t,a){s.exports=a.p+"assets/img/wps5.827ecf33.jpg"},324:function(s,t,a){s.exports=a.p+"assets/img/wps6.a1616bea.jpg"},325:function(s,t,a){s.exports=a.p+"assets/img/wps7.3d380238.jpg"},326:function(s,t,a){s.exports=a.p+"assets/img/wps8.b3e42715.jpg"},327:function(s,t,a){s.exports=a.p+"assets/img/wps9.cea79e39.jpg"},328:function(s,t,a){s.exports=a.p+"assets/img/wps10.78938312.jpg"},329:function(s,t,a){s.exports=a.p+"assets/img/wps11.049f65a6.jpg"},330:function(s,t,a){s.exports=a.p+"assets/img/wps12.d71add0c.jpg"},331:function(s,t,a){s.exports=a.p+"assets/img/wps13.34e9223f.jpg"},332:function(s,t,a){s.exports=a.p+"assets/img/wps14.8c4436a0.jpg"},333:function(s,t,a){s.exports=a.p+"assets/img/wps15.ebdf49fa.jpg"},334:function(s,t,a){s.exports=a.p+"assets/img/wps16.ec5a66f6.jpg"},335:function(s,t,a){s.exports=a.p+"assets/img/wps17.f29c3025.jpg"},336:function(s,t,a){s.exports=a.p+"assets/img/wps18.09f3a259.jpg"},337:function(s,t,a){s.exports=a.p+"assets/img/wps19.2174c335.jpg"},338:function(s,t,a){s.exports=a.p+"assets/img/wps20.723b537f.jpg"},339:function(s,t,a){s.exports=a.p+"assets/img/wps21.079da265.jpg"},340:function(s,t,a){s.exports=a.p+"assets/img/wps22.fbfc07be.jpg"},341:function(s,t,a){s.exports=a.p+"assets/img/wps23.05175079.jpg"},342:function(s,t,a){s.exports=a.p+"assets/img/wps24.7cff2f46.jpg"},343:function(s,t,a){s.exports=a.p+"assets/img/wps25.354063f2.jpg"},344:function(s,t,a){s.exports=a.p+"assets/img/wps26.530d22ba.jpg"},345:function(s,t,a){s.exports=a.p+"assets/img/wps27.f88821f4.jpg"},346:function(s,t,a){s.exports=a.p+"assets/img/wps28.303bc0bc.jpg"},347:function(s,t,a){s.exports=a.p+"assets/img/wps29.e040f9b7.jpg"},348:function(s,t,a){s.exports=a.p+"assets/img/wps30.ca6e457e.jpg"},349:function(s,t,a){s.exports=a.p+"assets/img/wps31.9a7392bc.jpg"},350:function(s,t,a){s.exports=a.p+"assets/img/wps32.2424537e.jpg"},351:function(s,t,a){s.exports=a.p+"assets/img/wps33.8149e29e.jpg"},352:function(s,t,a){s.exports=a.p+"assets/img/wps34.8cc5ae66.jpg"},353:function(s,t,a){s.exports=a.p+"assets/img/wps35.6636dd11.jpg"},354:function(s,t,a){s.exports=a.p+"assets/img/wps36.9f77a379.jpg"},355:function(s,t,a){s.exports=a.p+"assets/img/wps37.b3d3a7cf.jpg"},356:function(s,t,a){s.exports=a.p+"assets/img/wps38.78a03d7a.jpg"},357:function(s,t,a){s.exports=a.p+"assets/img/wps39.4c6ba53b.jpg"},358:function(s,t,a){s.exports=a.p+"assets/img/wps40.263cde24.jpg"},359:function(s,t,a){s.exports=a.p+"assets/img/wps41.ed63954d.jpg"},360:function(s,t,a){s.exports=a.p+"assets/img/wps42.74d32d33.jpg"},361:function(s,t,a){s.exports=a.p+"assets/img/wps43.1e46f28e.jpg"},362:function(s,t,a){s.exports=a.p+"assets/img/wps44.8f713fb7.jpg"},363:function(s,t,a){s.exports=a.p+"assets/img/wps45.7b2bf519.jpg"},364:function(s,t,a){s.exports=a.p+"assets/img/wps46.10711848.jpg"},365:function(s,t,a){s.exports=a.p+"assets/img/wps47.9eb2711b.jpg"},366:function(s,t,a){s.exports=a.p+"assets/img/wps48.98256557.jpg"},547:function(s,t,a){"use strict";a.r(t);var _=a(10),p=Object(_.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"浏览器的渲染原理-袁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的渲染原理-袁"}},[s._v("#")]),s._v(" 浏览器的渲染原理(袁)")]),s._v(" "),t("p",[s._v("什么是渲染?")]),s._v(" "),t("p",[s._v("渲染 render")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("Vue、react 里面的渲染概念指的是虚拟dom;")])]),s._v(" "),t("li",[t("p",[s._v("电影里面的渲染，譬如迪士尼动画片指的是将3d模型转成一帧帧的图片")])]),s._v(" "),t("li",[t("p",[s._v("浏览器渲染指的是将html字符串转换成每一个像素点的信息，整个过程就是渲染。")])])]),s._v(" "),t("p",[t("img",{attrs:{src:a(319),alt:"img"}}),s._v("渲染的模型函数")]),s._v(" "),t("p",[s._v("只要获取到像素点的颜色交给GPU(显卡)，就能显示。")]),s._v(" "),t("h2",{attrs:{id:"渲染的时间点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染的时间点"}},[s._v("#")]),s._v(" 渲染的时间点")]),s._v(" "),t("p",[t("img",{attrs:{src:a(320),alt:"img"}})]),s._v(" "),t("p",[s._v("有道面试题从地址栏输入url 会发生什么？")]),s._v(" "),t("p",[s._v("主要两件事：")]),s._v(" "),t("p",[s._v("网络：拿html(html中包含js、css)")]),s._v(" "),t("p",[s._v("渲染：")]),s._v(" "),t("p",[s._v("网络进程拿出一个线程进行通讯获取到html 后，将渲染任务放到事件循环的消息队列中（排队）。渲染主线程拿到了渲染任务后就启动了渲染流程。这节课主要研究的是在渲染流程里如何去渲染的。")]),s._v(" "),t("h2",{attrs:{id:"渲染流水线"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染流水线"}},[s._v("#")]),s._v(" 渲染流水线")]),s._v(" "),t("p",[t("img",{attrs:{src:a(321),alt:"img"}})]),s._v(" "),t("h2",{attrs:{id:"_1-解析html-parse-html"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-解析html-parse-html"}},[s._v("#")]),s._v(" 1. 解析HTML - Parse HTML")]),s._v(" "),t("p",[t("img",{attrs:{src:a(322),alt:"img"}})]),s._v(" "),t("p",[s._v("将字符串转成dom结构，为后续步骤操作提供方便，以及js操作对象。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(323),alt:"img"}})]),s._v(" "),t("p",[t("img",{attrs:{src:a(324),alt:"img"}})]),s._v(" "),t("p",[s._v("StyleSheetList: 根节点，代表着网页中所有的样式表。")]),s._v(" "),t("p",[s._v("网页样式表有4种：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("内部样式表："),t("code",[s._v("<style>")])])]),s._v(" "),t("li",[t("p",[s._v("外部样式表："),t("code",[s._v("<link>")])])]),s._v(" "),t("li",[t("p",[s._v("行内（内联）样式表："),t("code",[s._v("style=””")])])]),s._v(" "),t("li",[t("p",[s._v("浏览器默认样式表 "),t("code",[s._v("user agent stylesheet")])])])]),s._v(" "),t("p",[t("img",{attrs:{src:a(325),alt:"img"}})]),s._v(" "),t("p",[s._v("JS能操作前3个样式，浏览器默认样式不能操作，对于行内样式 dom.style")]),s._v(" "),t("p",[s._v("对于1，2 使用 "),t("code",[s._v("document.styleSheets")]),s._v(" 返回 "),t("code",[s._v("styleSheetList<CSSStyleSheet>")])]),s._v(" "),t("p",[t("code",[s._v("document.styleSheets[1].addRule('button','border:1px solid red',0)")]),s._v(" "),t("code",[s._v("addRule")]),s._v(" 短时间内不会过期")]),s._v(" "),t("p",[t("code",[s._v("document.styleSheets[1].insertRule('button{color:red}',0);")])]),s._v(" "),t("p",[s._v("CSS CSSOM 树同样也是提供js 函数调用能力，对css进行修改。")]),s._v(" "),t("h3",{attrs:{id:"_1-1-html-解析过程遇到-css-代码怎么办"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-html-解析过程遇到-css-代码怎么办"}},[s._v("#")]),s._v(" 1.1. HTML 解析过程遇到 CSS 代码怎么办？")]),s._v(" "),t("p",[s._v("为了提高解析效率，浏览器会启动一个预解析器（就是一个线程）率先下载和解析 CSS")]),s._v(" "),t("p",[t("img",{attrs:{src:a(326),alt:"img"}})]),s._v(" "),t("p",[s._v("快速浏览是指快速浏览代码发现css立刻下载。")]),s._v(" "),t("p",[s._v("解析严格来说不算真正的解析，帮主线程做些前面不太好做的工作。最终完成cssom树的生成还是靠主线程。解析完了后将结果交给主线程，主线程生成cssom树，这一步就生成很快了，因为麻烦事别人已经做了，下载工作是网络线程，快速往前跑是预解析线程。（渲染主线程执行时遇到link元素，但是知道预解析线程已经在处理，于是继续往前跑，在某个点预解析线程提供解析结果，主线程将结果合并在一起。）")]),s._v(" "),t("h3",{attrs:{id:"_1-2-html-解析过程遇到-js-代码怎么办"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-html-解析过程遇到-js-代码怎么办"}},[s._v("#")]),s._v(" 1.2. HTML 解析过程遇到 JS 代码怎么办？")]),s._v(" "),t("p",[s._v("渲染主线程遇到 JS 时必须暂停一切行为，等待下载执行完后才能继续。")]),s._v(" "),t("p",[s._v("预解析线程可以分担一点下载 JS 的任务。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(327),alt:"img"}})]),s._v(" "),t("p",[s._v("比方说渲染主线程一直往前走，遇到script元素，这时发现正在下载js还没下载完，如果是css不管继续往后走，但是js不行,必须等待，等下载完成后将代码放到主线程，启动v8引擎取运行js，运行完了之后才能继续解析html。因为js有可能改变解析的dom，而dom是一点一点解析的不是一次解析完的。")]),s._v(" "),t("h2",{attrs:{id:"_2-样式计算-recalcuate-style"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-样式计算-recalcuate-style"}},[s._v("#")]),s._v(" 2.样式计算 - Recalcuate Style")]),s._v(" "),t("p",[t("img",{attrs:{src:a(328),alt:"img"}})]),s._v(" "),t("p",[s._v("css的属性值的计算过程就发生在这一步。css包含两块很重要的知识：")]),s._v(" "),t("ol",[t("li",[s._v("css属性值的计算过程")])]),s._v(" "),t("p",[s._v("层叠：叫权重优先级是比较粗糙的叫法，应该叫比较重要性、比较特殊性、比较元次序。")]),s._v(" "),t("p",[s._v("层叠里面就是这样的规则，用来解决冲突的，样式有重复，看胜出淘汰。")]),s._v(" "),t("p",[s._v("继承：")]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("视觉格式化模型")])]),s._v(" "),t("p",[s._v("盒模型")]),s._v(" "),t("p",[s._v("包含块")]),s._v(" "),t("p",[s._v("流式布局")]),s._v(" "),t("p",[s._v("浮动布局")]),s._v(" "),t("p",[s._v("BFC")]),s._v(" "),t("p",[s._v("每个节点都有一个计算后的样式Computed Style")]),s._v(" "),t("h2",{attrs:{id:"_3-布局-layout"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-布局-layout"}},[s._v("#")]),s._v(" 3. 布局 - Layout")]),s._v(" "),t("p",[t("img",{attrs:{src:a(329),alt:"img"}})]),s._v(" "),t("p",[s._v("这一步结果很简单，根据带样式的dom树算出每个节点的尺寸和位置。但是过程很复杂，页面他们元素之间的位置和尺寸是相互影响的，一个元素的位置和尺寸变了，可能导致整个布局就会变了，例子多的很，简单的来说，父元素的高度是自动的，父元素的高度必须是由子元素算出开，子元素高度不一样，父元素的高度就不一样。比方说，父元素是浮动的，那么他的宽度还是自动的，所以这里的问题实际上很复杂。而且浏览器的视口的尺寸也会影响到里面的布局。它要用到css里面很多规则，整个视觉可视化模型里面的规则，浮动规则，BFC(会计格式化上下文)规则，都会用到这里面。包括margin的合并，都会影响盒子的尺寸位置，包括字体大小。过程很复杂，结果简单。见图上右侧结果。")]),s._v(" "),t("p",[s._v("结果要说两个东西（尺寸、位置）：尺寸我们知道，无非是宽高。第二个东西是位置，是相对谁的位置？听好，它的位置是相对包含块的位置。")]),s._v(" "),t("p",[s._v("总之，他的尺寸，位置都在布局这个步骤确定！也许会问,样式计算不会计算宽高吗？")]),s._v(" "),t("p",[s._v("不会，有些宽高能算出来，比方说绝对值的宽高，有些宽高百分比算不出来，有些宽高auto算不出来，只有在布局这个阶段才能算出来。")]),s._v(" "),t("p",[s._v("第二个是得到的结果，就是这颗树，它跟我们的dom树是不一样的，有些地方少了，有些地方多了。为什么造成差异呢？考验css功底时候到了。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(330),alt:"img"}})]),s._v(" "),t("p",[s._v("有些隐藏的元素不会出现在布局树里面，为什么？布局树是要找到每个节点的几何信息。什么是几何信息？就是尺寸和位置。像display:none的节点没有几何信息。譬如head,为什么head是隐藏的呢？因为浏览器默认样式设置的。")]),s._v(" "),t("p",[s._v("还有其他情况吗？伪元素，比如before在dom树中是不存在的，在布局树中存在。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(331),alt:"img"}})]),s._v(" "),t("p",[s._v("还有哪些情况呢，还有滚动条（？），这里")]),s._v(" "),t("p",[t("img",{attrs:{src:a(332),alt:"img"}})]),s._v(" "),t("p",[s._v("为什么布局会生成这么多这么东西出来？这都是布局的规则，b有这样的规则，听好：")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("内容必须在行盒中")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("行盒和块盒不能相邻")])])])]),s._v(" "),t("p",[s._v("你想想这个道理，这个内容是行盒，跟p元素是不能相邻的。但是发生了怎么办呢？它会这样处理，第一种处理方式：p元素里面包含个文本a，文本必须在行盒中，p元素不是行盒，它就会在布局树p元素里面，内容a的外面加个行盒，叫做匿名行盒，调试工具是看不到的。W3C原文。")]),s._v(" "),t("p",[s._v("对于内容b最外面会产生一个匿名块盒，外层生成匿名行盒。严格来说是这样的，上图没有画复杂。")]),s._v(" "),t("p",[s._v("误解：布局树中的节点也是dom。不是的，这样画便于理解，布局树每个节点是c++对象，js是获取不到的。如果左侧一个dom节点是浮动的，右侧会得到一个FloatingObject对象。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(333),alt:"img"}})]),s._v(" "),t("p",[s._v("布局对js而言不能直接获取，但是能间接获取一些信息，平时用的")]),s._v(" "),t("p",[t("code",[s._v("document.body.clientWidth")])]),s._v(" "),t("p",[t("code",[s._v("document.body.offsetWidth")])]),s._v(" "),t("p",[s._v("body后面点出来的明显不是style，是其他属性，这些玩意都是布局树里面的信息。")]),s._v(" "),t("p",[s._v("其实，渲染流程的每一步，都和我们代码是密切相关的，我会告诉你这代码是怎么来的，这数据。包括上步的**样式计算，**这块数据怎么获取呢？就是最终的计算样式结果，getComputedStyle(elt,?pseudoElt) 这句话没明白")]),s._v(" "),t("h2",{attrs:{id:"_4-分层-layer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-分层-layer"}},[s._v("#")]),s._v(" 4. 分层 - Layer")]),s._v(" "),t("p",[t("img",{attrs:{src:a(334),alt:"img"}})]),s._v(" "),t("p",[s._v("为什么要分层呢？按理说已经拿到了布局树，里面有各种几何信息，宽高尺寸以及位置。拿到了可以画了，但是为啥不画呢？因为浏览器要做个优化，就是页面画出来后，页面不是永远静止的，用户要操作的，随着用户操作，浏览器会发生很多变化，包括动画造成的变化，包括js造成的变化。一旦变化，页面就要重新绘制一遍，工作量太大了，能不能提高效率呢？怎么做，就是分层！")]),s._v(" "),t("p",[s._v("以前老的浏览器是没有的分层的，现代浏览器都有了。那么分层是怎么做的？很简单，借鉴了现实生活的做法，譬如贴纸，纸板上面贴了很多贴纸，贴纸变化了，将其中一张拿掉，就不用动其他的了，包括贴纸改写颜色，只需要改变贴纸就行了。这就是分层的思想，它把页面分层一些层次，将来要改动一个层次，只要改动不会影响到其他层次，它就只需要重新换内存就行了。谷歌浏览器调试工具能看到，中文叫 图层，en叫：Layers；edge中叫3D view。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(335),alt:"img"}})]),s._v(" "),t("p",[s._v("百度页面，没有生成很多层次，说明浏览器不会为你分太多的层次，因为分层，每一个层需要占用更多内存空间，分的太多吃不消，它首先要考虑内存空间，又要考虑将来重新绘制，所以它得找一个平衡，它还要根据页面规模，页面大一些层次可能会多一些，这些都说不准，就是每个浏览器内部都有一套自己的策略，具体怎么处理的我们不需要关心，因为每个浏览器处理的方式不一样，而且同一个浏览器不同的版本处理的方式也可能不一样。我们写的css多多少少会对分层有影响，有的代码会影响到它的分层决策，但也不是一定的。不是说你写出来它就会一定分层。只能说有影响，什么z-index，其实说白了，就是一句话，"),t("strong",[s._v("跟堆叠上下文有关的属性就会影响到结果。")]),s._v(" 它只是影响到它的决策，并不是直接形成分层的结果，"),t("strong",[s._v("什么叫做堆叠上下文？简单来说，就是跟一些属性有关，z-index、opacity、transform等。"),t("strong",[s._v("那么这些玩意在代码里面和我们有什么关系呢?有一个属性相对来说，是比较大的能影响分层结果。这个属性是")]),s._v("willchange")]),s._v("。举个例子，写一坨div，里面分层了，具体多少不知道，看调试器，这里的#5是滚动条的层，滚动条写需要画，鼠标滚动时，滚动条位置变了，需要重新渲染，重新绘制。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(336),alt:"img"}})]),s._v(" "),t("p",[t("img",{attrs:{src:a(337),alt:"img"}})]),s._v(" "),t("p",[t("img",{attrs:{src:a(338),alt:"img"}})]),s._v(" "),t("p",[s._v("假设希望里面的div单独分层，加样式will-change，比方说transform，告诉浏览器哪些属性将要会变化，让浏览器自己决策要不要单独给他分层。加过后能看到浏览器单独给div分了一层。但是will-change不要滥用，一定要是效率出现问题，渲染变卡了，调来调去发现是分层出现问题才用。这地方经常变动，不希望重绘过多，所以希望这块单独形成一个层，这时才用。分层过多不是什么好事。")]),s._v(" "),t("h2",{attrs:{id:"_5-绘制-paint-生成绘制指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-绘制-paint-生成绘制指令"}},[s._v("#")]),s._v(" 5.绘制 - Paint(生成绘制指令)")]),s._v(" "),t("p",[t("img",{attrs:{src:a(339),alt:"img"}})]),s._v(" "),t("p",[s._v("绘制还不是绘制像素点，离那步还有距离，他是先生成绘制的指令，什么是绘制指令？")]),s._v(" "),t("p",[t("img",{attrs:{src:a(340),alt:"img"}})]),s._v(" "),t("p",[s._v("一条就是一个指令。")]),s._v(" "),t("p",[s._v("这指令像啥呢？")]),s._v(" "),t("p",[s._v("很像canvas，canvas就跟这里的绘制指令基本差不多。我们用的canvas的画其实就是浏览器内核里的绘制的功能。写到canvas直接绘制，html只不过浏览器给你解析完了，生成布局树，分层完了过后，它（绘制指令Paint）来帮你绘制。平时就是在canvas上绘制，其实它（canvas）就是浏览器给你开放的一些功能，每一步其实和我们平时写的代码都有关联的（个人理解是，每一步都有相关联的js代码，这里就是canvas绘制api，布局树有getComputedStyle，document.body.clientWidth）。")]),s._v(" "),t("p",[s._v("这里绘制是指会为每一层形成单独的绘制指令，绘制指令就回到后续步骤了。")]),s._v(" "),t("p",[s._v("到这里，说完绘制（章节）过后，")]),s._v(" "),t("p",[t("strong",[s._v("渲染主线的工作到此为止，剩余步骤交给其他线程完成。")])]),s._v(" "),t("p",[t("img",{attrs:{src:a(341),alt:"img"}})]),s._v(" "),t("p",[s._v("主线程够忙了，来看下主线程做了哪些事？解析html，过程中产生dom树cssom树，遇到js执行js，dom树和cssom树交给第二步，样式计算，计算完成后会形成一棵dom树，里面什么样式都有了。然后进行布局，生成每个节点的几何信息，布局树和dom树就不一样了，会有差异。根据布局树他会分层，分层分出来以后会对每一层生成绘制指令，因为几何信息都知道了就知道该怎么画了。那么主线程就做到这了，不在做了，接下来它会交给其他线程完成后续步骤。")]),s._v(" "),t("p",[s._v("至于为什么交给其他线程，主线程不来处理呢？这是浏览器做了极大的优化。这个其他线程设计到很多线程，我们重点讲核心的东西。")]),s._v(" "),t("h2",{attrs:{id:"_6-分块-tiling"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-分块-tiling"}},[s._v("#")]),s._v(" 6. 分块 - Tiling")]),s._v(" "),t("p",[t("img",{attrs:{src:a(342),alt:"img"}})]),s._v(" "),t("p",[s._v("Tile 是块，分块单词就是Tiling。")]),s._v(" "),t("p",[t("strong",[s._v("分块将每一层分为多个小的区域")])]),s._v(" "),t("p",[s._v("为什么要分为小区域呢，想象下，每一层可能很大，页面很大，每一层东西很多，那么在画的时候可能有个优先级，比方说我们的电脑只有这么大点，我们是不是先画些靠近我们视口位置的小块，其他小块我们以后再画，不着急，优先把这个地方（视口）画了，马上就可以显示出来。它这要是起这样的一个作用。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(343),alt:"img"}}),t("img",{attrs:{src:a(344),alt:"img"}})]),s._v(" "),t("p",[s._v("那么分块的逻辑在这：")]),s._v(" "),t("p",[s._v("分块的工作是交给多个线程同时进行的。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(345),alt:"img"}})]),s._v(" "),t("p",[s._v("前面是主线程，产生绘制指令过后，然后呢交给另外的线程，合成线程，这个线程其实也在渲染进程里面，渲染进程里面之前只讲过渲染主线程，其实还有很多线程，H5的Work，它有个JS工作线程。这里不去讨论。它（渲染进程）有合成线程，它可以专门来做分块。它在分块，它（Tiling）是怎么工作的呢？它就是一个指挥命令的人，它又会启动更多的线程。")]),s._v(" "),t("p",[s._v("这样又提供了好几个线程，一起来分块，这工作可以同时进行，这样可以最大效率提高分块的过程。")]),s._v(" "),t("p",[s._v("Mac电脑使用活动监视器（想办法看下）")]),s._v(" "),t("p",[t("img",{attrs:{src:a(346),alt:"img"}}),s._v("这是一个渲染进程")]),s._v(" "),t("p",[t("img",{attrs:{src:a(347),alt:"img"}}),s._v("取样进程，提取出来。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(348),alt:"img"}})]),s._v(" "),t("p",[s._v("Compositor 合成线程。启动了多个CompositorTileWorker 分块线程，根据不同的机器配置，根据实时内存占用情况， 它可能不一样的（应该指数量）。")]),s._v(" "),t("p",[s._v("从这里启动多个线程完成分块，把每一层的绘制分层很多很多小的块，最终会得到一个分块的信息。")]),s._v(" "),t("h2",{attrs:{id:"_7-光栅化-raster"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-光栅化-raster"}},[s._v("#")]),s._v(" 7.光栅化 - Raster")]),s._v(" "),t("p",[t("img",{attrs:{src:a(349),alt:"img"}})]),s._v(" "),t("p",[t("strong",[s._v("光栅化是将每个块变成位图，优先处理靠近视口的块")])]),s._v(" "),t("p",[s._v("位图：就是每个像素点的信息，可以理解为内存里面的二维数组，记着每个像素点的颜色。")]),s._v(" "),t("p",[s._v("我们刚分的块，其中一个块就要把像素点算出来，这个块有多少个像素点，每个像素点的颜色是啥，它可不可以算，可以算，所有信息都在里面，包括它的，额，位置尺寸就是在整个是一个的位置的尺寸，然后分块之后，就是每个块的位置尺寸以及信息都有，属于哪个层的都有，可以计算了，样式也全部都有，就可以算出它的每个色块的颜色，每个像素点的颜色。")]),s._v(" "),t("p",[s._v("光栅化有个优化操作。刚才不是说为什么要分块，不就是为了提高效率吗？有太多的工作要做了，我们优先把哪些靠近视口的块。（假设下图红框是屏幕，优先块就是四个角对应的块）")]),s._v(" "),t("p",[t("img",{attrs:{src:a(350),alt:"img"}})]),s._v(" "),t("p",[s._v("先把这些块变成像素点，其他块后续在做，把优先靠近视口的块优先进行光栅化。")]),s._v(" "),t("p",[s._v("光栅化是谁在做呢？")]),s._v(" "),t("p",[t("img",{attrs:{src:a(351),alt:"img"}})]),s._v(" "),t("p",[s._v("光栅化是GPU里面做的，又涉及到别的线程了。GPU里面又有很多线程就不去扯远了。")]),s._v(" "),t("p",[s._v("此过程会用到GPU加速，会用到显卡，GPU的运算速度是要高出CPU很多的很多的。")]),s._v(" "),t("p",[s._v("为啥不用GPU代替CPU呢?主要原因，GPU能干的事CPU都能干，只是慢一点，GPU功能范围比较小一些，只做显示相关的一些运算，做的事少，更专注，所以更快。")]),s._v(" "),t("p",[s._v("通过GPU的加速可以提升光栅化的运算速度，把它变成像素块的运算速度。")]),s._v(" "),t("p",[s._v("看图，合成线程在光栅化的时候把工作交给GPU进程（又是浏览器另外一个进程了，浏览器进程中可以看见），让它完成光栅化，它的过程也挺复杂的，光栅化最终生成的是位图，一块块的位图交给合成线程，优先生成靠近视口的。")]),s._v(" "),t("h2",{attrs:{id:"_8-画-draw"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-画-draw"}},[s._v("#")]),s._v(" 8.画 - Draw")]),s._v(" "),t("p",[t("img",{attrs:{src:a(352),alt:"img"}})]),s._v(" "),t("p",[s._v("合成线程在合成之前需要确认一个信息，quad，也叫draw quad，不好翻译，翻成 「指引（quad）」信息。什么是指引信息？就是他告诉你每一个块，它形成的位图嘛，它有颜色了，这个位图相对于屏幕在哪，跟之前布局不一样，布局是相对整个页面，那么这一块是相对于整个屏幕的位置在哪，该放在那个地方，先画哪个位图，再画哪个位图，依次把它画出来，它根据分层结构先去计算下，这个计算速度是很快的，然后把生成quad信息交给GPU进程，")]),s._v(" "),t("p",[s._v("GPU进程再交给真实的硬件显卡，最终显卡就把这些像素信息按照他的位置就呈现出来了，这里有个小的点了解下就行了，为什么合成线程不直接交给硬件呢（draw这一步）？而要在GPU里面中转一下呢？Quad出来后可以直接画了，为啥还要中转？GPU进程实际上是浏览器进程哈，不是显卡的，就是浏览器的进程交给真实的硬件，为什么要这样做呢?")]),s._v(" "),t("p",[s._v("合成线程在哪？合成线程和渲染主线程都在渲染进程里面。事件循环里面就讲了，渲染进程里面有个渲染主线程，现在又学了个合成线程。渲染进程他是放到一个沙盒子里面的。什么叫沙盒？沙盒里面的东西和外界是隔离开的，它和操作系统的硬件是隔离的，这样做的好处是什么呢，好处在于安全，如果说你中了一些病毒，或者浏览器安装了恶意的插件，它就算攻击浏览器渲染进程，去破坏里面的各种数据，去调用里面的函数，但是由于现在的进程是在沙盒里面的，它无法对整个计算机造成影响，所以说现在的浏览器很安全呢，就算渲染进程遭到攻击了，他顶多在浏览器里面弹出些窗口，画些东西，但他影响不了你的操作系统，影响不了你的硬件，不会导致你的计算机中病毒，除非你去下载本地安装就不一样了，就是你在浏览网页过程中不会导致你计算机中病毒，这是它的安全机制，所以呢，由于它在沙盒里面隔离了硬件，它没有办法直接找GPU进程，它找不到，因为找GPU的过程叫 **系统调用，**就是调用操作系统的接口，渲染进程是没有这个能力的，所以必须中转一下，把这个信息交给GPU进程，GPU进程不在沙盒里面，它可以直接通知硬件，让硬件GPU画出来。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(353),alt:"img"}})]),s._v(" "),t("p",[s._v("这里面还有一个点，特别重要，就是页面的画的时候还要确定些东西，比方说页面上有些css用了transform，也就是变形，那么变形怎么在页面上画出来呢？比如旋转，放大缩小，这些东西是在第8步确定的，这一步很简单，一个数学运算，矩阵变换，就是把位图通过transform进行矩阵变换，在第8步就矩阵变换弯成，最终把quad信息交给GPU。")]),s._v(" "),t("p",[s._v("最终总结，看图")]),s._v(" "),t("p",[t("img",{attrs:{src:a(354),alt:"img"}})]),s._v(" "),t("p",[s._v("解析html生成dom树和cssom树，计算样式，让每个dom树上都有最终的样式，布局，计算每个dom节点的几何信息，布局树和dom树不一样，不能对应，layer分层，为了提高后续渲染效率，它把页面根据一套策略分成几个图层，每个层能进行单独绘制；下一步产生绘制指令，把指令交给合成线程的分块，分块完成后变成很多的小块，对每一个层，每一个小块进行光栅化，就变成一个个像素点，一个个位图，优先光栅化靠近屏幕的小块，最后呢把靠近屏幕的小块发送到GPU画出来，整个过程就完成了。")]),s._v(" "),t("p",[s._v("整个过程讲完了，现代浏览器渲染的流程!")]),s._v(" "),t("p",[s._v("看些和渲染过程相关的面试题。")]),s._v(" "),t("h2",{attrs:{id:"常见面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见面试题"}},[s._v("#")]),s._v(" "),t("strong",[s._v("常见面试题")])]),s._v(" "),t("h3",{attrs:{id:"什么是reflow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是reflow"}},[s._v("#")]),s._v(" "),t("strong",[s._v("什么是reflow?")])]),s._v(" "),t("p",[t("img",{attrs:{src:a(355),alt:"img"}})]),s._v(" "),t("p",[s._v("需要开课去讲，这里点一下，其实也好解释，在我们页面里面有些代码，页面都画完了，js去修改样式，比方说把宽度修改了，这里修改的是cssom，当我们修改一些和几何信息相关的时候，就是会影响到整个几何信息的时候，我们修改的是cssom，也有可能是dom，dom增加了影响布局信息，当我们做了一些操作，可能影响布局的时候，它就会启动一系列的重新计算，计算样式(computedStyle)变了，布局（layout）变了，这一步是比较耗时的。分层也有可能发生变化，分层变了，后面肯定要重绘，重新产生绘制指令，肯定要重新分块，重新光栅化，重新画出来，那么这个过程叫做reflow。")]),s._v(" "),t("p",[s._v("reflow中的flow和布局是相关的，刚才看到，布局里面有个对象的名字叫LayoutBlockFlow。flow就是排版的意思，reflow就是重新排版。因为布局变了，重新排版对效率影响比较大，代码运行过程中，尽量少的改动那些影响几何信息的操作，尽量少做，哪些操作会影响几何信息呢？改变dom的结构，特别是可见dom元素会影响，宽高，margin，padding，字体大小都会影响，文字也有几何信息的。")]),s._v(" "),t("p",[s._v("（"),t("strong",[s._v("这里有个单独讲的知识点")]),s._v("）为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当js代码全部完成后再进行统一计算。所以，改动属性造成的reflow是异步完成得。比方说你连续写了几行代码，改了宽高，padding,marging，这些都是和布局有关系，或者创建一个dom加到body中去，若果每一步执行完就马上重新计算布局树（layout），这样太影响效率了，因为计算过程是很慢的，也没有必要，我等你js代码运行完之后，我在消息队列中产生一个重新布局的任务，用异步的方式处理多好啊，这样就可以把这些布局操作合并在一起，一起处理了。这是浏览器为了提高效率的一种手段。但是也是因为这个提升效率导致一个问题，我如果（在dom.style.margin代码后面）要得到dom元素的当前宽度就会出问题，你看刚才的事件队列，目前正在执行一段js(右侧红框js)，执行完后产生一个任务，但是我这任务没有执行，没有重新布局，但是我现在又在调用dom.clientWidth，")]),s._v(" "),t("p",[t("img",{attrs:{src:a(356),alt:"img"}}),s._v("那这里只能得到之前的宽度，")]),s._v(" "),t("p",[t("img",{attrs:{src:a(357),alt:"img"}}),s._v("这明显不合理，宽度改了，得不到最新宽度，得到还是之前的呢？这很神奇，所以说"),t("strong",[s._v("当你读取这些几何信息的时候，它就会产生一个同步任务，")]),t("img",{attrs:{src:a(358),alt:"img"}}),s._v("（蓝色框表示reflow任务）这里(渲染主线程)重新reflow。这就是"),t("strong",[s._v("设置不会立即导致reflow，读取立即导致reflow")]),s._v("的原因。有的时候为了强行的重新布局，可以读取下这种属性（dom.clientWidth）。")]),s._v(" "),t("p",[s._v("浏览器在反复权衡下，"),t("strong",[s._v("最终决定获取几何属性立即reflow")]),s._v("。")]),s._v(" "),t("p",[s._v("怪不得之前有个视频（找到性能瓶颈），里面性能问题最终定位在if(m.offsetTop===0)处，应该就是这个原因。")]),s._v(" "),t("h3",{attrs:{id:"什么是repaint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是repaint"}},[s._v("#")]),s._v(" 什么是repaint?")]),s._v(" "),t("p",[t("img",{attrs:{src:a(359),alt:"img"}})]),s._v(" "),t("p",[s._v("重绘的本质就是重新根据分层信息计算了绘制指令。")]),s._v(" "),t("p",[s._v("这里就是paint这一步，比如这里改动了字体颜色、背景颜色，他和几何信息无关，layout直接跳过，甚至分层（layer）都跳过，看情况了，若果影响了分层层次，他就跳不过，还得重新分层，但是paint不能跳过，要产生绘制指令，先画啥，填充啥颜色，这些都要画的。后续步骤要依次执行。")]),s._v(" "),t("p",[s._v("由于元素的布局信息也属于课件样式，所以reflow一定引起repaint。")]),s._v(" "),t("h3",{attrs:{id:"为什么transform的效率高"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么transform的效率高"}},[s._v("#")]),s._v(" 为什么transform的效率高？")]),s._v(" "),t("p",[t("img",{attrs:{src:a(360),alt:"img"}})]),s._v(" "),t("p",[s._v("因为tansform直接跳过前面步骤，直接在draw进行。就影响这一步，所以它效率特别高，甚至呢，图上的transform和animation一起来使用的话，因为这里我们指的是js改变transform，那么cssom树变了，但是若果说你是用animation，cssom树都没变，就变成这样子啦")]),s._v(" "),t("p",[t("img",{attrs:{src:a(361),alt:"img"}})]),s._v(" "),t("p",[s._v("主线程不知道你在干嘛，完全是无感的，演示下，这有两个例子。")]),s._v(" "),t("h4",{attrs:{id:"_1-动画"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-动画"}},[s._v("#")]),s._v(" 1. "),t("strong",[s._v("动画")])]),s._v(" "),t("p",[t("img",{attrs:{src:a(362),alt:"img"}}),t("img",{attrs:{src:a(363),alt:"img"}})]),s._v(" "),t("p",[s._v("代码如上，两个小球，分别用transform 和left做的动画，js有个死循环函数。")]),s._v(" "),t("p",[s._v("运行时，初始很正常，点击死循环按钮后，ball2就暂停了，ball1继续运动，为什么呢？")]),s._v(" "),t("p",[s._v("两个效果看起来一样，但两个产生的重新渲染逻辑不一样的，用left变化的话，会引起reflow，")]),s._v(" "),t("p",[t("img",{attrs:{src:a(364),alt:"img"}}),s._v("这些过程都要改，它会在主线程上改，但是主线程一会儿点击按钮会卡死，可以想象下一会点击按钮后，改动left会怎样。另一个是使用了transform，而且跟annimation配合来使用的，跟主线程没关系。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(365),alt:"img"}}),s._v("所以点击死循环按钮后，left停止了，页面卡死，但是animation和transform结合的正常运行，因为它不在主线程之上。")]),s._v(" "),t("h4",{attrs:{id:"_2-滚动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-滚动"}},[s._v("#")]),s._v(" 2. "),t("strong",[s._v("滚动")])]),s._v(" "),t("p",[s._v("其实浏览器的滚动，这滚动条在滚动，它不是要翻吗？在翻的过程，就需要重新渲染，它怎么重新渲染呢？")]),s._v(" "),t("p",[t("img",{attrs:{src:a(366),alt:"img"}})]),s._v(" "),t("p",[s._v("我们来看下，它滚动条滚动的时候，不影响parse，因为没改动dom和cssom，style(最终样式)不影响，layout不影响，layer不影响，paint不影响，tiling分块不影响，raster光栅化不影响，只有视口的相对位置变了，所以滚动滚动条的时候只需要在合成线程里面重新画一遍就完事了，因此页面点击死循环，其他都不能动了，但是还是可以滚动，因为它不在渲染主线程上。因此呢，正是浏览器做了这么多的优化，才让我们现代如此丰富的页面展示下，页面还能够非常的流畅。")])])}),[],!1,null,null,null);t.default=p.exports}}]);