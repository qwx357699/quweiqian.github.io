(window.webpackJsonp=window.webpackJsonp||[]).push([[453],{826:function(t,a,v){"use strict";v.r(a);var _=v(10),s=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"自增和自减"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自增和自减"}},[t._v("#")]),t._v(" 自增和自减")]),t._v(" "),a("h2",{attrs:{id:"基本功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本功能"}},[t._v("#")]),t._v(" 基本功能")]),t._v(" "),a("p",[t._v("一元运算符")]),t._v(" "),a("p",[t._v("++：将某个变量的值自增1")]),t._v(" "),a("p",[t._v("--：将某个变量的值自减1")]),t._v(" "),a("h2",{attrs:{id:"细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#细节"}},[t._v("#")]),t._v(" 细节")]),t._v(" "),a("h3",{attrs:{id:"自增自减表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自增自减表达式"}},[t._v("#")]),t._v(" 自增自减表达式")]),t._v(" "),a("p",[t._v("x++: 将变量x自增1，得到的表达式的值是自增之前的值。\n++x: 将变量x自增1，得到的表达式的值是自增之后的值。\nx--: 将变量x自减1，得到的表达式的值是自减之前的值。\n--x: 将变量x自减1，得到的表达式的值是自减之后的值。")]),t._v(" "),a("h3",{attrs:{id:"优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优先级"}},[t._v("#")]),t._v(" 优先级")]),t._v(" "),a("p",[t._v("从高到底依次是：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("++ --")])]),t._v(" "),a("li",[a("code",[t._v("* / %")])]),t._v(" "),a("li",[a("code",[t._v("+ -")])])]),t._v(" "),a("p",[t._v("优先级的运算细节：")]),t._v(" "),a("ol",[a("li",[t._v("从左到右依次查看")]),t._v(" "),a("li",[t._v("如果遇到操作数，将数据的值直接取出")]),t._v(" "),a("li",[t._v("如果遇到相邻的两个运算符，并且左边的运算符优先级大于等于右边的运算符，则直接运行左边的运算符。")])])])}),[],!1,null,null,null);a.default=s.exports}}]);