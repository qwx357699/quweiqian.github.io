(window.webpackJsonp=window.webpackJsonp||[]).push([[352],{721:function(v,_,t){"use strict";t.r(_);var l=t(10),s=Object(l.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"回顾-事件循环"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#回顾-事件循环"}},[v._v("#")]),v._v(" [回顾]事件循环")]),v._v(" "),_("blockquote",[_("p",[_("strong",[v._v("注意")]),v._v("：内容过时，作为参考，见固定任务事件循环，异步所有内容见笔面试 promise")])]),v._v(" "),_("p",[v._v("JS运行的环境称之为宿主环境。")]),v._v(" "),_("p",[v._v("执行栈：call stack，一个数据结构，用于存放各种函数的执行环境，每一个函数执行之前，它的相关信息会加入到执行栈。函数调用之前，创建执行环境，然后加入到执行栈；函数调用之后，销毁执行环境。")]),v._v(" "),_("p",[v._v("JS引擎永远执行的是执行栈的最顶部。")]),v._v(" "),_("p",[v._v("异步函数：某些函数不会立即执行，需要等到某个时机到达后才会执行，这样的函数称之为异步函数。比如事件处理函数。异步函数的执行时机，会被宿主环境控制。")]),v._v(" "),_("p",[v._v("浏览器宿主环境中包含5个线程：")]),v._v(" "),_("ol",[_("li",[v._v("JS引擎：负责执行执行栈的最顶部代码")]),v._v(" "),_("li",[v._v("GUI线程：负责渲染页面")]),v._v(" "),_("li",[v._v("事件监听线程：负责监听各种事件")]),v._v(" "),_("li",[v._v("计时线程：负责计时")]),v._v(" "),_("li",[v._v("网络线程：负责网络通信")])]),v._v(" "),_("p",[v._v("当上面的线程发生了某些事请，如果该线程发现，这件事情有处理程序，它会将该处理程序加入一个叫做事件队列的内存。当JS引擎发现，执行栈中已经没有了任何内容后，会将事件队列中的第一个函数加入到执行栈中执行。")]),v._v(" "),_("p",[v._v("JS引擎对事件队列的取出执行方式，以及与宿主环境的配合，称之为事件循环。")]),v._v(" "),_("p",[v._v("事件队列在不同的宿主环境中有所差异，大部分宿主环境会将事件队列进行细分。在浏览器中，事件队列分为两种：")]),v._v(" "),_("ul",[_("li",[v._v("宏任务（队列）：macroTask，计时器结束的回调、事件回调、http回调等等绝大部分异步函数进入宏队列")]),v._v(" "),_("li",[v._v("微任务（队列）：MutationObserver，Promise产生的回调进入微队列")])]),v._v(" "),_("blockquote",[_("p",[v._v("MutationObserver用于监听某个DOM对象的变化")])]),v._v(" "),_("p",[v._v("当执行栈清空时，JS引擎首先会将微任务中的所有任务依次执行结束，如果没有微任务，则执行宏任务。")])])}),[],!1,null,null,null);_.default=s.exports}}]);