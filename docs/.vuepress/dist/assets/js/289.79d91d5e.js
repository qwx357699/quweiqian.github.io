(window.webpackJsonp=window.webpackJsonp||[]).push([[289],{658:function(t,v,_){"use strict";_.r(v);var a=_(10),s=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"diff"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#diff"}},[t._v("#")]),t._v(" diff")]),t._v(" "),v("blockquote",[v("p",[t._v("面试题：请阐述vue的diff算法")]),t._v(" "),v("p",[t._v("参考回答：")]),t._v(" "),v("p",[t._v("当组件创建和更新时，vue均会执行内部的update函数，该函数使用render函数生成的虚拟dom树，将新旧两树进行对比，找到差异点，最终更新到真实dom")]),t._v(" "),v("p",[t._v("对比差异的过程叫diff，vue在内部通过一个叫patch的函数完成该过程")]),t._v(" "),v("p",[t._v("在对比时，vue采用深度优先、同层比较的方式进行比对。")]),t._v(" "),v("p",[t._v("在判断两个节点是否相同时，vue是通过虚拟节点的key和tag来进行判断的")]),t._v(" "),v("p",[t._v("具体来说，首先对根节点进行对比，如果相同则将旧节点关联的真实dom的引用挂到新节点上，然后根据需要更新属性到真实dom，然后再对比其子节点数组；如果不相同，则按照新节点的信息递归创建所有真实dom，同时挂到对应虚拟节点上，然后移除掉旧的dom。")]),t._v(" "),v("p",[t._v("在对比其子节点数组时，vue对每个子节点数组使用了两个指针，分别指向头尾，然后不断向中间靠拢来进行对比，这样做的目的是尽量复用真实dom，尽量少的销毁和创建真实dom。如果发现相同，则进入和根节点一样的对比流程，如果发现不同，则移动真实dom到合适的位置。")]),t._v(" "),v("p",[t._v("这样一直递归的遍历下去，直到整棵树完成对比。")])]),t._v(" "),v("h2",{attrs:{id:"_1-diff的时机"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-diff的时机"}},[t._v("#")]),t._v(" 1. "),v("code",[t._v("diff")]),t._v("的时机")]),t._v(" "),v("p",[t._v("当组件创建时，以及依赖的属性或数据变化时，会运行一个函数，该函数会做两件事：")]),t._v(" "),v("ul",[v("li",[t._v("运行"),v("code",[t._v("_render")]),t._v("生成一棵新的虚拟dom树（vnode tree）")]),t._v(" "),v("li",[t._v("运行"),v("code",[t._v("_update")]),t._v("，传入虚拟dom树的根节点，对新旧两棵树进行对比，最终完成对真实dom的更新")])]),t._v(" "),v("p",[t._v("核心代码如下：")]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vue构造函数")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("Vue")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... 其他代码")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("updateComponent")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("_update")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("_render")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Watcher")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("updateComponent"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... 其他代码")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),v("p",[v("code",[t._v("diff")]),t._v("就发生在"),v("code",[t._v("_update")]),t._v("函数的运行过程中")]),t._v(" "),v("h2",{attrs:{id:"_2-update函数在干什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-update函数在干什么"}},[t._v("#")]),t._v(" 2. "),v("code",[t._v("_update")]),t._v("函数在干什么")]),t._v(" "),v("p",[v("code",[t._v("_update")]),t._v("函数接收到一个"),v("code",[t._v("vnode")]),t._v("参数，这就是"),v("strong",[t._v("新")]),t._v("生成的虚拟dom树")]),t._v(" "),v("p",[t._v("同时，"),v("code",[t._v("_update")]),t._v("函数通过当前组件的"),v("code",[t._v("_vnode")]),t._v("属性，拿到"),v("strong",[t._v("旧")]),t._v("的虚拟dom树")]),t._v(" "),v("p",[v("code",[t._v("_update")]),t._v("函数首先会给组件的"),v("code",[t._v("_vnode")]),t._v("属性重新赋值，让它指向新树")]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://mdrs.yuanjin.tech/img/20210301193804.png",alt:"image-20210301193804498"}}),t._v(" "),v("p",[t._v("然后会判断旧树是否存在：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("不存在：说明这是第一次加载组件，于是通过内部的"),v("code",[t._v("patch")]),t._v("函数，直接遍历新树，为每个节点生成真实DOM，挂载到每个节点的"),v("code",[t._v("elm")]),t._v("属性上")]),t._v(" "),v("img",{staticStyle:{zoom:"43%"},attrs:{src:"http://mdrs.yuanjin.tech/img/20210301194237.png",alt:"image-20210301194237825"}})]),t._v(" "),v("li",[v("p",[t._v("存在：说明之前已经渲染过该组件，于是通过内部的"),v("code",[t._v("patch")]),t._v("函数，对新旧两棵树进行对比，以达到下面两个目标：")]),t._v(" "),v("ul",[v("li",[t._v("完成对所有真实dom的最小化处理")]),t._v(" "),v("li",[t._v("让新树的节点对应合适的真实dom")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://mdrs.yuanjin.tech/img/20210301195003.png",alt:"image-20210301195003696"}})])]),t._v(" "),v("h2",{attrs:{id:"_3-patch函数的对比流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-patch函数的对比流程"}},[t._v("#")]),t._v(" 3. "),v("code",[t._v("patch")]),t._v("函数的对比流程")]),t._v(" "),v("p",[v("strong",[t._v("术语解释")]),t._v("：")]),t._v(" "),v("ol",[v("li",[t._v("「"),v("strong",[t._v("相同")]),t._v("」：是指两个虚拟节点的标签类型、"),v("code",[t._v("key")]),t._v("值均相同，但"),v("code",[t._v("input")]),t._v("元素还要看"),v("code",[t._v("type")]),t._v("属性")]),t._v(" "),v("li",[t._v("「"),v("strong",[t._v("新建元素")]),t._v("」：是指根据一个虚拟节点提供的信息，创建一个真实dom元素，同时挂载到虚拟节点的"),v("code",[t._v("elm")]),t._v("属性上")]),t._v(" "),v("li",[t._v("「"),v("strong",[t._v("销毁元素")]),t._v("」：是指："),v("code",[t._v("vnode.elm.remove()")])]),t._v(" "),v("li",[t._v("「"),v("strong",[t._v("更新")]),t._v("」：是指对两个虚拟节点进行对比更新，它"),v("strong",[t._v("仅发生")]),t._v("在两个虚拟节点「相同」的情况下。具体过程稍后描述。")]),t._v(" "),v("li",[t._v("「"),v("strong",[t._v("对比子节点")]),t._v("」：是指对两个虚拟节点的子节点进行对比，具体过程稍后描述")])]),t._v(" "),v("p",[v("strong",[t._v("详细流程：")])]),t._v(" "),v("ol",[v("li",[v("p",[v("strong",[t._v("根节点比较")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://mdrs.yuanjin.tech/img/20210301203350.png",alt:"image-20210301203350246"}}),t._v(" "),v("p",[v("code",[t._v("patch")]),t._v("函数首先对根节点进行比较")]),t._v(" "),v("p",[t._v("如果两个节点：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("「相同」，进入**「更新」流程**")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("将旧节点的真实dom赋值到新节点："),v("code",[t._v("newVnode.elm = oldVnode.elm")])])]),t._v(" "),v("li",[v("p",[t._v("对比新节点和旧节点的属性，有变化的更新到真实dom中")])]),t._v(" "),v("li",[v("p",[t._v("当前两个节点处理完毕，开始**「对比子节点」**")])])])]),t._v(" "),v("li",[v("p",[t._v("不「相同」")]),t._v(" "),v("ol",[v("li",[t._v("新节点"),v("strong",[t._v("递归")]),t._v("「新建元素」")]),t._v(" "),v("li",[t._v("旧节点「销毁元素」")])])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("「对比子节点」")])]),t._v(" "),v("p",[t._v("在「对比子节点」时，vue一切的出发点，都是为了：")]),t._v(" "),v("ul",[v("li",[t._v("尽量啥也别做")]),t._v(" "),v("li",[t._v("不行的话，尽量仅改动元素属性")]),t._v(" "),v("li",[t._v("还不行的话，尽量移动元素，而不是删除和创建元素")]),t._v(" "),v("li",[t._v("还不行的话，删除和创建元素")])])])])])}),[],!1,null,null,null);v.default=s.exports}}]);