(window.webpackJsonp=window.webpackJsonp||[]).push([[360],{729:function(t,e,s){"use strict";s.r(e);var a=s(10),o=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"object的新增api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object的新增api"}},[t._v("#")]),t._v(" Object的新增API")]),t._v(" "),e("h2",{attrs:{id:"_1-object-is"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-object-is"}},[t._v("#")]),t._v(" 1. Object.is")]),t._v(" "),e("p",[t._v("用于判断两个数据是否相等，基本上跟严格相等（===）是一致的，除了以下两点：")]),t._v(" "),e("ol",[e("li",[t._v("NaN和NaN相等")]),t._v(" "),e("li",[t._v("+0和-0不相等")])]),t._v(" "),e("h2",{attrs:{id:"_2-object-assign"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-object-assign"}},[t._v("#")]),t._v(" 2. Object.assign")]),t._v(" "),e("p",[t._v("用于混合对象")]),t._v(" "),e("h2",{attrs:{id:"_3-object-getownpropertynames-的枚举顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-object-getownpropertynames-的枚举顺序"}},[t._v("#")]),t._v(" 3. Object.getOwnPropertyNames 的枚举顺序")]),t._v(" "),e("p",[t._v("Object.getOwnPropertyNames方法之前就存在，只不过，官方没有明确要求，对属性的顺序如何排序，如何排序，完全由浏览器厂商决定。")]),t._v(" "),e("p",[t._v("ES6规定了该方法返回的数组的排序方式如下：")]),t._v(" "),e("ul",[e("li",[t._v("先排数字，并按照升序排序")]),t._v(" "),e("li",[t._v("再排其他，按照书写顺序排序")])]),t._v(" "),e("h2",{attrs:{id:"_4-object-setprototypeof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-object-setprototypeof"}},[t._v("#")]),t._v(" 4. Object.setPrototypeOf")]),t._v(" "),e("p",[t._v("该函数用于设置某个对象的隐式原型")]),t._v(" "),e("p",[t._v("比如： Object.setPrototypeOf(obj1, obj2)，\n相当于：  "),e("code",[t._v("obj1.__proto__ = obj2")])])])}),[],!1,null,null,null);e.default=o.exports}}]);