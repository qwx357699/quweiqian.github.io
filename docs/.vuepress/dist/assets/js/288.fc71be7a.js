(window.webpackJsonp=window.webpackJsonp||[]).push([[288],{653:function(e,t,v){"use strict";v.r(t);var a=v(10),_=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"数据响应原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据响应原理"}},[e._v("#")]),e._v(" 数据响应原理")]),e._v(" "),t("blockquote",[t("p",[e._v("面试题：请阐述"),t("code",[e._v("vue2")]),e._v("响应式原理")])]),e._v(" "),t("blockquote",[t("p",[e._v("vue官方阐述：https://cn.vuejs.org/v2/guide/reactivity.html")])]),e._v(" "),t("p",[t("strong",[e._v("响应式数据的最终目标")]),e._v("，是当对象本身或对象属性发生变化时，将会运行一些函数，最常见的就是render函数。")]),e._v(" "),t("p",[e._v("在具体实现上，vue用到了"),t("strong",[e._v("几个核心部件")]),e._v("：")]),e._v(" "),t("ol",[t("li",[e._v("Observer")]),e._v(" "),t("li",[e._v("Dep")]),e._v(" "),t("li",[e._v("Watcher")]),e._v(" "),t("li",[e._v("Scheduler")])]),e._v(" "),t("h2",{attrs:{id:"observer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#observer"}},[e._v("#")]),e._v(" Observer")]),e._v(" "),t("p",[e._v("Observer要实现的目标非常简单，就是把一个普通的对象转换为响应式的对象")]),e._v(" "),t("p",[e._v("为了实现这一点，Observer把对象的每个属性通过"),t("code",[e._v("Object.defineProperty")]),e._v("转换为带有"),t("code",[e._v("getter")]),e._v("和"),t("code",[e._v("setter")]),e._v("的属性，这样一来，当访问或设置属性时，"),t("code",[e._v("vue")]),e._v("就有机会做一些别的事情。")]),e._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://mdrs.yuanjin.tech/img/20210226153448.png",alt:"image-20210226153448807"}}),e._v(" "),t("p",[e._v("Observer是vue内部的构造器，我们可以通过Vue提供的静态方法"),t("code",[e._v("Vue.observable( object )")]),e._v("间接的使用该功能。")]),e._v(" "),t("p",[e._v("在组件生命周期中，这件事发生在"),t("code",[e._v("beforeCreate")]),e._v("之后，"),t("code",[e._v("created")]),e._v("之前。")]),e._v(" "),t("p",[e._v("具体实现上，它会递归遍历对象的所有属性，以完成深度的属性转换。")]),e._v(" "),t("p",[e._v("由于遍历时只能遍历到对象的当前属性，因此无法监测到将来动态增加或删除的属性，因此"),t("code",[e._v("vue")]),e._v("提供了"),t("code",[e._v("$set")]),e._v("和"),t("code",[e._v("$delete")]),e._v("两个实例方法，让开发者通过这两个实例方法对已有响应式对象添加或删除属性。")]),e._v(" "),t("p",[e._v("对于数组，"),t("code",[e._v("vue")]),e._v("会更改它的隐式原型，之所以这样做，是因为vue需要监听那些可能改变数组内容的方法")]),e._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://mdrs.yuanjin.tech/img/20210226154624.png",alt:"image-20210226154624015"}}),e._v(" "),t("p",[e._v("总之，Observer的目标，就是要让一个对象，它属性的读取、赋值，内部数组的变化都要能够被vue感知到。")]),e._v(" "),t("h2",{attrs:{id:"dep"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dep"}},[e._v("#")]),e._v(" Dep")]),e._v(" "),t("p",[e._v("这里有两个问题没解决，就是读取属性时要做什么事，而属性变化时要做什么事，这个问题需要依靠Dep来解决。")]),e._v(" "),t("p",[e._v("Dep的含义是"),t("code",[e._v("Dependency")]),e._v("，表示依赖的意思。")]),e._v(" "),t("p",[t("code",[e._v("Vue")]),e._v("会为响应式对象中的每个属性、对象本身、数组本身创建一个"),t("code",[e._v("Dep")]),e._v("实例，每个"),t("code",[e._v("Dep")]),e._v("实例都有能力做以下两件事：")]),e._v(" "),t("ul",[t("li",[e._v("记录依赖：是谁在用我")]),e._v(" "),t("li",[e._v("派发更新：我变了，我要通知那些用到我的人")])]),e._v(" "),t("p",[e._v("当读取响应式对象的某个属性时，它会进行依赖收集：有人用到了我")]),e._v(" "),t("p",[e._v("当改变某个属性时，它会派发更新：那些用我的人听好了，我变了")]),e._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://mdrs.yuanjin.tech/img/20210226155852.png",alt:"image-20210226155852964"}}),e._v(" "),t("h2",{attrs:{id:"watcher"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#watcher"}},[e._v("#")]),e._v(" Watcher")]),e._v(" "),t("p",[e._v("这里又出现一个问题，就是Dep如何知道是谁在用我？")]),e._v(" "),t("p",[e._v("要解决这个问题，需要依靠另一个东西，就是Watcher。")]),e._v(" "),t("p",[e._v("当某个函数执行的过程中，用到了响应式数据，响应式数据是无法知道是哪个函数在用自己的")]),e._v(" "),t("p",[e._v("因此，vue通过一种巧妙的办法来解决这个问题")]),e._v(" "),t("p",[e._v("我们不要直接执行函数，而是把函数交给一个叫做watcher的东西去执行，watcher是一个对象，每个这样的函数执行时都应该创建一个watcher，通过watcher去执行")]),e._v(" "),t("p",[e._v("watcher会设置一个全局变量，让全局变量记录当前负责执行的watcher等于自己，然后再去执行函数，在函数的执行过程中，如果发生了依赖记录"),t("code",[e._v("dep.depend()")]),e._v("，那么"),t("code",[e._v("Dep")]),e._v("就会把这个全局变量记录下来，表示：有一个watcher用到了我这个属性")]),e._v(" "),t("p",[e._v("当Dep进行派发更新时，它会通知之前记录的所有watcher：我变了")]),e._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://mdrs.yuanjin.tech/img/20210226161404.png",alt:"image-20210226161404327"}}),e._v(" "),t("p",[e._v("每一个"),t("code",[e._v("vue")]),e._v("组件实例，都至少对应一个"),t("code",[e._v("watcher")]),e._v("，该"),t("code",[e._v("watcher")]),e._v("中记录了该组件的"),t("code",[e._v("render")]),e._v("函数。")]),e._v(" "),t("p",[t("code",[e._v("watcher")]),e._v("首先会把"),t("code",[e._v("render")]),e._v("函数运行一次以收集依赖，于是那些在render中用到的响应式数据就会记录这个watcher。")]),e._v(" "),t("p",[e._v("当数据变化时，dep就会通知该watcher，而watcher将重新运行render函数，从而让界面重新渲染同时重新记录当前的依赖。")]),e._v(" "),t("h2",{attrs:{id:"scheduler"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scheduler"}},[e._v("#")]),e._v(" Scheduler")]),e._v(" "),t("p",[e._v("现在还剩下最后一个问题，就是Dep通知watcher之后，如果watcher执行重运行对应的函数，就有可能导致函数频繁运行，从而导致效率低下")]),e._v(" "),t("p",[e._v("试想，如果一个交给watcher的函数，它里面用到了属性a、b、c、d，那么a、b、c、d属性都会记录依赖，于是下面的代码将触发4次更新：")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("state"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"new data"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nstate"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("b "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"new data"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nstate"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("c "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"new data"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nstate"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("d "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"new data"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),t("p",[e._v("这样显然是不合适的，因此，watcher收到派发更新的通知后，实际上不是立即执行对应函数，而是把自己交给一个叫调度器的东西")]),e._v(" "),t("p",[e._v("调度器维护一个执行队列，该队列同一个watcher仅会存在一次，队列中的watcher不是立即执行，它会通过一个叫做"),t("code",[e._v("nextTick")]),e._v("的工具方法，把这些需要执行的watcher放入到事件循环的微队列中，nextTick的具体做法是通过"),t("code",[e._v("Promise")]),e._v("完成的")]),e._v(" "),t("blockquote",[t("p",[e._v("nextTick 通过 "),t("code",[e._v("this.$nextTick")]),e._v(" 暴露给开发者")]),e._v(" "),t("p",[e._v("nextTick 的具体处理方式见：https://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97")])]),e._v(" "),t("p",[e._v("也就是说，当响应式数据变化时，"),t("code",[e._v("render")]),e._v("函数的执行是异步的，并且在微队列中")]),e._v(" "),t("h2",{attrs:{id:"总体流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总体流程"}},[e._v("#")]),e._v(" 总体流程")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://mdrs.yuanjin.tech/img/20210226163936.png",alt:"image-20210226163936839"}})])])}),[],!1,null,null,null);t.default=_.exports}}]);