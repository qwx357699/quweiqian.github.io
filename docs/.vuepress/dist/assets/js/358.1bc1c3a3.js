(window.webpackJsonp=window.webpackJsonp||[]).push([[358],{730:function(t,s,a){"use strict";a.r(s);var n=a(10),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"set-集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set-集合"}},[t._v("#")]),t._v(" set 集合")]),t._v(" "),s("blockquote",[s("p",[t._v("一直以来，JS只能使用数组和对象来保存多个数据，缺乏像其他语言那样拥有丰富的集合类型。因此，ES6新增了两种集合类型（set 和 map），用于在不同的场景中发挥作用。")])]),t._v(" "),s("p",[s("strong",[t._v("set用于存放不重复的数据")])]),t._v(" "),s("ol",[s("li",[t._v("如何创建set集合")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建一个没有任何内容的set集合")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建一个具有初始内容的set集合，内容来自于可迭代对象每一次迭代的结果")]),t._v("\n\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("如何对set集合进行后续操作")])]),t._v(" "),s("ul",[s("li",[t._v("add(数据): 添加一个数据到set集合末尾，如果数据已存在，则不进行任何操作\n"),s("ul",[s("li",[t._v("set使用Object.is的方式判断两个数据是否相同，但是，针对+0和-0，set认为是相等")])])]),t._v(" "),s("li",[t._v("has(数据): 判断set中是否存在对应的数据")]),t._v(" "),s("li",[t._v("delete(数据)：删除匹配的数据，返回是否删除成功")]),t._v(" "),s("li",[t._v("clear()：清空整个set集合")]),t._v(" "),s("li",[t._v("size: 获取set集合中的元素数量，只读属性，无法重新赋值")])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("如何与数组进行相互转换")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// set本身也是一个可迭代对象，每次迭代的结果就是每一项的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[t._v("如何遍历")])]),t._v(" "),s("p",[t._v("1). 使用for-of循环\n2). 使用set中的实例方法forEach")]),t._v(" "),s("p",[t._v("注意：set集合中不存在下标，因此forEach中的回调的第二个参数和第一个参数是一致的，均表示set中的每一项")])])}),[],!1,null,null,null);s.default=e.exports}}]);