(window.webpackJsonp=window.webpackJsonp||[]).push([[388],{761:function(s,t,a){"use strict";a.r(t);var n=a(10),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"扩展-类型化数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩展-类型化数组"}},[s._v("#")]),s._v(" [扩展]类型化数组")]),s._v(" "),t("h2",{attrs:{id:"数字存储的前置知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数字存储的前置知识"}},[s._v("#")]),s._v(" 数字存储的前置知识")]),s._v(" "),t("ol",[t("li",[t("p",[t("strong",[s._v("计算机必须使用固定的位数来存储数字，无论存储的数字是大是小，在内存中占用的空间是固定的。")])]),s._v(" "),t("blockquote",[t("p",[t("em",[s._v("为什么是固定的位数存储数字呢？和计算机组成原理甚至和编译原理有关，计算机读取数据是一块一块读的，每一块是没有分割的，不固定就不知道在哪分割。这样导致有很多种存储方案，8位16位32位等")])])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("n位的无符号整数能表示的数字是2^n个，取值范围是：0 ~ 2^n - 1")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("n位的有符号整数能表示的数字是2^n个，取值范围是：-2^(n-1) ~ 2^(n-1) - 1")])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("计算机对数字存储的是 补码！\n规定正数的源码、反码、补码是相同的，负数不一样\n负数第一位为 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("，正数为 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" 位有符号整数源码：\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("001")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("010")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("011")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("110")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("111")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 正数 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("000")]),s._v(" 反码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("000")]),s._v(" 补码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("000")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("001")]),s._v(" 反码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("001")]),s._v(" 补码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("001")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("010")]),s._v(" 反码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("010")]),s._v(" 补码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("010")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("011")]),s._v(" 反码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("011")]),s._v(" 补码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("011")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 负数 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" 反码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("111")]),s._v(" 补码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" 多一位丢丢弃 补码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("、"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("的补码相同\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),s._v(" 反码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("110")]),s._v(" 补码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("111")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("110")]),s._v(" 反码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),s._v(" 补码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("110")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("111")]),s._v(" 反码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" 补码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("重复 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 源码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" 源码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("111")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 补码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("111")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" 补码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 补码："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" 溢出的"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("舍去，补码和"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("一样，所以使用"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("表示"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("，\n所以"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("没有源码和反码，在"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("位有符号整数中。\n因此只要补码是 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" ，其十进制数值就位"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("。\n"),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("参考：https")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("zhuanlan"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("zhihu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("com"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("p"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("371184302")]),s._v("\n")])])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("浮点数表示法可以用于表示整数和小数，目前分为两种标准：")])]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("32位浮点数：又称为单精度浮点数，它用1位表示符号，8位表示阶码，23位表示尾数")])]),s._v(" "),t("li",[t("strong",[s._v("64位浮点数：又称为双精度浮点数，它用1位表示符号，11位表示阶码，52位表示尾数")])])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("浮点数表示中，任何一个数字变为科学计数法表示：\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("aaaaa "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("n \n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("精度")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("有效数字"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("：aaaaa 底数："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" 指数：n \n其中变化的只有 精度 和 指数\n计算机怎么存储的呢，例如\nxxxx xxxx xxxx xxxx\n第一位最为符号位 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("或"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n中间拿一部作为指数，这部分称为阶码\n剩下的储存尾数，就是有效数字 aaaaa\n也就是按照 符号"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("阶码"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("尾数 方式存储\n具体表示"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),s._v("位，"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("位，这两种都是国际标准，一般计算机语言会选择一种，有的语言两种方式都有：\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("位浮点数：符号")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("阶码")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("尾数")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("位浮点数：符号")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("阶码")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("尾数")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("52")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n有效数字：\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("333.1")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("个有效数字\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.2353453")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("个有效数字\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("小知识：其他语言里面有效数字超过7位，使用双精度")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("位浮点数"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，低于"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("位使用"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),s._v("位浮点数。\n")])])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("JS中的所有数字，均使用双精度浮点数保存")])]),s._v(" "),t("blockquote",[t("p",[t("em",[s._v("小数、整数、0都是用64位浮点数存储的")])])])])]),s._v(" "),t("h2",{attrs:{id:"类型化数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型化数组"}},[s._v("#")]),s._v(" 类型化数组")]),s._v(" "),t("blockquote",[t("p",[t("em",[s._v("为什么需要类型化数组？")])])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("假设要存储 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" 个 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n需要占用 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6400")]),s._v(" 位 \n1byte "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("8bit \n1kb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("1024byte\n1mb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 1024kb\nbyte 是计算机存储的最小单位\n意味着需要 800kb 内存\n在某些场景下面，我们特别需要在意内存空间的使用\n传统的数组方式会造成特别大的内存空间的浪费\n为了解决这个问题，js 推出来类型化数组\n")])])]),t("p",[s._v("**类型化数组：用于优化多个数字的存储(**"),t("em",[s._v("注意类型化数组只针对数字的数组，不能存在对象、布尔、字符串等类型数组")]),s._v(")")]),s._v(" "),t("p",[t("strong",[s._v("具体分为：")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("Int8Array： 8位有符号整数（-128 ~ 127）")])]),s._v(" "),t("li",[t("strong",[s._v("Uint8Array： 8位无符号整数（0 ~ 255）")])]),s._v(" "),t("li",[t("strong",[s._v("Int16Array: ...")])]),s._v(" "),t("li",[t("strong",[s._v("Uint16Array: ...")])]),s._v(" "),t("li",[t("strong",[s._v("Int32Array: ...")])]),s._v(" "),t("li",[t("strong",[s._v("Uint32Array: ...")])]),s._v(" "),t("li",[t("strong",[s._v("Float32Array:")])]),s._v(" "),t("li",[t("strong",[s._v("Float64Array")])])]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("如何创建数组")])])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1. const arr = new Int8Array(10)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("数组构造函数")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("长度"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//2. const arr = Int8Array.of(2,3,4)")]),s._v("\n数组构造函数"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("of")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("元素"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 注意：防止溢出")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 例如: const arr = Int8Array.of(128,3,4)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出: [-128, 3, 4, buffer: ArrayBuffer(3)...]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 为什么是 -128?因为最大存储+127，")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// +127 补码：0111 1111")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// +128 补码：1000 0000 直接存储，8位够， 1000 0000 -0 也就表示-128")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果: const arr = Int8Array.of(-129)会得到什么？")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// -129 源码：1 1000 0001 反码：1 0111 1110 补码：1 0111 1111，存储，8位不够，丢弃高位1，存储 0111 1111 也就是+127")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//3. const arr = Int8Array.from([2,3,4])")]),s._v("\n数组构造函数"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("可迭代对象"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//4. const arr = Int8Array.of(2, 5, 5, 9);")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   const arr2 = new Int8Array(arr);")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("数组构造函数")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("其他类型化数组"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[t("strong",[s._v("得到长度")])])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("数组"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//得到元素数量")]),s._v("\n数组"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("byteLength "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//得到占用内存的字节数")]),s._v("\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[t("strong",[s._v("其他的用法跟普通数组一致，但是：")])])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("不能增加和删除数据，类型化数组的长度固定")])]),s._v(" "),t("li",[t("strong",[s._v("一些返回数组的方法，返回的数组是同类型化的新数组")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);