(window.webpackJsonp=window.webpackJsonp||[]).push([[222],{596:function(t,a,v){"use strict";v.r(a);var e=v(10),s=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"浏览器缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存"}},[t._v("#")]),t._v(" 浏览器缓存")]),t._v(" "),a("p",[t._v("本文主要包含以下内容：")]),t._v(" "),a("ul",[a("li",[t._v("什么是浏览器缓存")]),t._v(" "),a("li",[t._v("按照缓存位置分类\n"),a("ul",[a("li",[a("em",[t._v("Service Worker")])]),t._v(" "),a("li",[a("em",[t._v("Memory Cache")])]),t._v(" "),a("li",[a("em",[t._v("Disk Cache")])]),t._v(" "),a("li",[a("em",[t._v("Push Cache")])])])]),t._v(" "),a("li",[t._v("按照缓存类型分类\n"),a("ul",[a("li",[t._v("强制缓存")]),t._v(" "),a("li",[t._v("协商缓存")])])]),t._v(" "),a("li",[t._v("缓存读取规则")]),t._v(" "),a("li",[t._v("浏览器行为")]),t._v(" "),a("li",[t._v("实操案例")]),t._v(" "),a("li",[t._v("缓存的最佳实践")])]),t._v(" "),a("h2",{attrs:{id:"什么是浏览器缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是浏览器缓存"}},[t._v("#")]),t._v(" 什么是浏览器缓存")]),t._v(" "),a("p",[t._v("在正式开始讲解浏览器缓存之前，我们先来回顾一下整个 "),a("em",[t._v("Web")]),t._v(" 应用的流程。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-12-03-063551.png",alt:"image-20211203143550954"}})]),t._v(" "),a("p",[t._v("上图展示了一个 "),a("em",[t._v("Web")]),t._v(" 应用最最简单的结构。客户端向服务器端发送 "),a("em",[t._v("HTTP")]),t._v(" 请求，服务器端从数据库获取数据，然后进行计算处理，之后向客户端返回 "),a("em",[t._v("HTTP")]),t._v(" 响应。")]),t._v(" "),a("p",[t._v("那么上面整个流程中，哪些地方比较耗费时间呢？总结起来有如下两个方面：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("发送请求的时候")])]),t._v(" "),a("li",[a("p",[t._v("涉及到大量计算的时候")])])]),t._v(" "),a("p",[t._v("一般来讲，上面两个阶段比较耗费时间。")]),t._v(" "),a("p",[t._v("首先是发送请求的时候。这里所说的请求，不仅仅是 "),a("em",[t._v("HTTP")]),t._v(" 请求，也包括服务器向数据库发起查询数据的请求。")]),t._v(" "),a("p",[t._v("其次是大量计算的时候。一般涉及到大量计算，主要是在服务器端和数据库端，服务器端要进行计算这个很好理解，数据库要根据服务器发送过来的查询命令查询到对应的数据，这也是比较耗时的一项工作。")]),t._v(" "),a("p",[t._v("因此，单论缓存的话，我们其实在很多地方都可以做缓存。例如：")]),t._v(" "),a("ul",[a("li",[t._v("数据库缓存")]),t._v(" "),a("li",[a("em",[t._v("CDN")]),t._v(" 缓存")]),t._v(" "),a("li",[t._v("代理服务器缓存")]),t._v(" "),a("li",[t._v("浏览器缓存")]),t._v(" "),a("li",[t._v("应用层缓存")])]),t._v(" "),a("p",[t._v("针对各个地方做出适当的缓存，都能够很大程度的优化整个 "),a("em",[t._v("Web")]),t._v(" 应用的性能。但是要逐一讨论的话，是一个非常大的工程量，所以本文我们主要来看一下浏览器缓存，这也是和我们前端开发息息相关的。")]),t._v(" "),a("p",[t._v("整个浏览器的缓存过程如下：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-12-03-063613.png",alt:"image-20211203143612695"}}),t._v(" "),a("p",[t._v("从上图我们可以看到，整个浏览器端的缓存其实没有想象的那么复杂。其最基本的原理就是：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识")])]),t._v(" "),a("li",[a("p",[t._v("浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中")])])]),t._v(" "),a("p",[t._v("以上两点结论就是浏览器缓存机制的关键，它确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了。")]),t._v(" "),a("p",[t._v("接下来，我将从两个维度来介绍浏览器缓存：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("缓存的存储位置")])]),t._v(" "),a("li",[a("p",[t._v("缓存的类型")])])]),t._v(" "),a("h2",{attrs:{id:"按照缓存位置分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#按照缓存位置分类"}},[t._v("#")]),t._v(" 按照缓存位置分类")]),t._v(" "),a("p",[t._v("从缓存位置上来说分为四种，并且各自有优先级，当依次查找缓存且都没有命中的时候，才会去请求网络。这四种依次为：")]),t._v(" "),a("ul",[a("li",[a("p",[a("em",[t._v("Service Worker")])])]),t._v(" "),a("li",[a("p",[a("em",[t._v("Memory Cache")])])]),t._v(" "),a("li",[a("p",[a("em",[t._v("Disk Cache")])])]),t._v(" "),a("li",[a("p",[a("em",[t._v("Push Cache")])])])]),t._v(" "),a("h3",{attrs:{id:"service-worker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service-worker"}},[t._v("#")]),t._v(" "),a("em",[t._v("Service Worker")])]),t._v(" "),a("p",[a("em",[t._v("Service Worker")]),t._v(" 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。")]),t._v(" "),a("p",[t._v("使用 "),a("em",[t._v("Service Worker")]),t._v(" 的话，传输协议必须为 "),a("em",[t._v("HTTPS")]),t._v("。因为 "),a("em",[t._v("Service Worker")]),t._v(" 中涉及到请求拦截，所以必须使用 "),a("em",[t._v("HTTPS")]),t._v(" 协议来保障安全。")]),t._v(" "),a("p",[a("em",[t._v("Service Worker")]),t._v(" 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。")]),t._v(" "),a("p",[a("em",[t._v("Service Worker")]),t._v(" 实现缓存功能一般分为三个步骤：首先需要先注册 "),a("em",[t._v("Service Worker")]),t._v("，然后监听到 "),a("em",[t._v("install")]),t._v(" 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。.")]),t._v(" "),a("p",[t._v("当 "),a("em",[t._v("Service Worker")]),t._v(" 没有命中缓存的时候，我们需要去调用 "),a("em",[t._v("fetch")]),t._v(" 函数获取数据。也就是说，如果我们没有在 "),a("em",[t._v("Service Worker")]),t._v(" 命中缓存的话，会根据缓存查找优先级去查找数据。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-12-03-063636.png",alt:"image-20211203143635717"}})]),t._v(" "),a("p",[t._v("但是不管我们是从 "),a("em",[t._v("Memory Cache")]),t._v(" 中还是从网络请求中获取的数据，浏览器都会显示我们是从 "),a("em",[t._v("Service Worker")]),t._v(" 中获取的内容。")]),t._v(" "),a("h3",{attrs:{id:"memory-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-cache"}},[t._v("#")]),t._v(" "),a("em",[t._v("Memory Cache")])]),t._v(" "),a("p",[a("em",[t._v("Memory Cache")]),t._v(" 也就是内存中的缓存，主要包含的是当前中页面中已经抓取到的资源，例如页面上已经下载的样式、脚本、图片等。")]),t._v(" "),a("p",[t._v("读取内存中的数据肯定比磁盘快，内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。一旦我们关闭 "),a("em",[t._v("Tab")]),t._v(" 页面，内存中的缓存也就被释放了。")]),t._v(" "),a("p",[t._v("那么既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？")]),t._v(" "),a("p",[t._v("这是不可能的。计算机中的内存一定比硬盘容量小得多，操作系统需要精打细算内存的使用，所以能让我们使用的内存必然不多。")]),t._v(" "),a("p",[t._v("当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-12-03-063700.png",alt:"image-20211203143700033"}})]),t._v(" "),a("p",[a("em",[t._v("Memory Cache")]),t._v(" 机制保证了一个页面中如果有两个相同的请求。")]),t._v(" "),a("p",[t._v("例如两个 "),a("em",[t._v("src")]),t._v(" 相同的 <"),a("em",[t._v("img")]),t._v(">，两个 "),a("em",[t._v("href")]),t._v(" 相同的 <"),a("em",[t._v("link")]),t._v(">，都实际只会被请求最多一次，避免浪费。")]),t._v(" "),a("h3",{attrs:{id:"disk-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disk-cache"}},[t._v("#")]),t._v(" "),a("em",[t._v("Disk Cache")])]),t._v(" "),a("p",[a("em",[t._v("Disk Cache")]),t._v(" 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 "),a("em",[t._v("Memory Cache")]),t._v(" 胜在容量和存储时效性上。")]),t._v(" "),a("p",[t._v("在所有浏览器缓存中，"),a("em",[t._v("Disk Cache")]),t._v(" 覆盖面基本是最大的。它会根据 "),a("em",[t._v("HTTP Herder")]),t._v(" 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。")]),t._v(" "),a("p",[t._v("并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。绝大部分的缓存都来自 "),a("em",[t._v("Disk Cache")]),t._v("。")]),t._v(" "),a("p",[t._v("凡是持久性存储都会面临容量增长的问题，"),a("em",[t._v("Disk Cache")]),t._v(" 也不例外。")]),t._v(" "),a("p",[t._v("在浏览器自动清理时，会有特殊的算法去把“最老的”或者“最可能过时的”资源删除，因此是一个一个删除的。不过每个浏览器识别“最老的”和“最可能过时的”资源的算法不尽相同，这也可以看作是各个浏览器差异性的体现。")]),t._v(" "),a("h3",{attrs:{id:"push-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#push-cache"}},[t._v("#")]),t._v(" "),a("em",[t._v("Push Cache")])]),t._v(" "),a("p",[a("em",[t._v("Push Cache")]),t._v(" 翻译成中文叫做“推送缓存”，是属于 "),a("em",[t._v("HTTP/2")]),t._v(" 中新增的内容。")]),t._v(" "),a("p",[t._v("当以上三种缓存都没有命中时，它才会被使用。它只在会话（"),a("em",[t._v("Session")]),t._v("）中存在，一旦会话结束就被释放，并且缓存时间也很短暂，在 "),a("em",[t._v("Chrome")]),t._v(" 浏览器中只有 "),a("em",[t._v("5")]),t._v(" 分钟左右，同时它也并非严格执行 "),a("em",[t._v("HTTP/2")]),t._v(" 头中的缓存指令。")]),t._v(" "),a("p",[a("em",[t._v("Push Cache")]),t._v(" 在国内能够查到的资料很少，也是因为 "),a("em",[t._v("HTTP2")]),t._v(" 在国内还不够普及。")]),t._v(" "),a("p",[t._v("这里推荐阅读 "),a("em",[t._v("Jake Archibald")]),t._v(" 的 "),a("a",{attrs:{href:"https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/",target:"_blank",rel:"noopener noreferrer"}},[a("em",[t._v("HTTP/2 push is tougher than I thought")]),a("OutboundLink")],1),t._v(" 这篇文章。")]),t._v(" "),a("p",[t._v("文章中的几个结论：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("所有的资源都能被推送，并且能够被缓存，但是 "),a("em",[t._v("Edge")]),t._v(" 和 "),a("em",[t._v("Safari")]),t._v(" 浏览器支持相对比较差")])]),t._v(" "),a("li",[a("p",[t._v("可以推送 "),a("em",[t._v("no-cache")]),t._v(" 和 "),a("em",[t._v("no-store")]),t._v(" 的资源")])]),t._v(" "),a("li",[a("p",[t._v("一旦连接被关闭，"),a("em",[t._v("Push Cache")]),t._v(" 就被释放")])]),t._v(" "),a("li",[a("p",[t._v("多个页面可以使用同一个 "),a("em",[t._v("HTTP/2")]),t._v(" 的连接，也就可以使用同一个 "),a("em",[t._v("Push Cache")]),t._v("。这主要还是依赖浏览器的实现而定，出于对性能的考虑，有的浏览器会对相同域名但不同的 "),a("em",[t._v("tab")]),t._v(" 标签使用同一个 "),a("em",[t._v("HTTP")]),t._v(" 连接。")])]),t._v(" "),a("li",[a("p",[a("em",[t._v("Push Cache")]),t._v(" 中的缓存只能被使用一次")])]),t._v(" "),a("li",[a("p",[t._v("浏览器可以拒绝接受已经存在的资源推送")])]),t._v(" "),a("li",[a("p",[t._v("你可以给其他域名推送资源")])])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("如果一个请求在上述几个位置都没有找到缓存，那么浏览器会正式发送网络请求去获取内容。之后为了提升之后请求的缓存命中率，自然要把这个资源添加到缓存中去。具体来说：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("根据 "),a("em",[t._v("Service Worker")]),t._v(" 中的 "),a("em",[t._v("handler")]),t._v(" 决定是否存入 "),a("em",[t._v("Cache Storage")]),t._v(" (额外的缓存位置)。"),a("em",[t._v("Service Worker")]),t._v(" 是由开发者编写的额外的脚本，且缓存位置独立，出现也较晚，使用还不算太广泛。")])]),t._v(" "),a("li",[a("p",[a("em",[t._v("Memory Cache")]),t._v(" 保存一份资源的引用，以备下次使用。"),a("em",[t._v("Memory Cache")]),t._v(" 是浏览器为了加快读取缓存速度而进行的自身的优化行为，不受开发者控制，也不受 "),a("em",[t._v("HTTP")]),t._v(" 协议头的约束，算是一个黑盒。")])]),t._v(" "),a("li",[a("p",[t._v("根据 "),a("em",[t._v("HTTP")]),t._v(" 头部的相关字段（ "),a("em",[t._v("Cache-control、Pragma")]),t._v(" 等 ）决定是否存入 "),a("em",[t._v("Disk Cache")]),t._v("。"),a("em",[t._v("Disk Cache")]),t._v(" 也是平时我们最熟悉的一种缓存机制，也叫 "),a("em",[t._v("HTTP Cache")]),t._v(" (因为不像 "),a("em",[t._v("Memory Cache")]),t._v("，它遵守 "),a("em",[t._v("HTTP")]),t._v(" 协议头中的字段)。平时所说的强制缓存，协商缓存，以及 "),a("em",[t._v("Cache-Control")]),t._v(" 等，也都归于此类。")])])]),t._v(" "),a("h2",{attrs:{id:"按照缓存类型分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#按照缓存类型分类"}},[t._v("#")]),t._v(" 按照缓存类型分类")]),t._v(" "),a("p",[t._v("按照缓存类型来进行分类，可以分为"),a("strong",[t._v("强制缓存")]),t._v("和"),a("strong",[t._v("协商缓存")]),t._v("。需要注意的是，无论是强制缓存还是协商缓存，都是属于 "),a("em",[t._v("Disk Cache")]),t._v(" 或者叫做 "),a("em",[t._v("HTTP Cache")]),t._v(" 里面的一种。")]),t._v(" "),a("h3",{attrs:{id:"强制缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存"}},[t._v("#")]),t._v(" 强制缓存")]),t._v(" "),a("p",[t._v("强制缓存的含义是，当客户端请求后，会先访问缓存数据库看缓存是否存在。如果存在则直接返回；不存在则请求真的服务器，响应后再写入缓存数据库。")]),t._v(" "),a("p",[t._v("强制缓存直接减少请求数，是提升最大的缓存策略。如果考虑使用缓存来优化网页性能的话，强制缓存应该是首先被考虑的。")]),t._v(" "),a("p",[t._v("可以造成强制缓存的字段是 "),a("em",[t._v("Cache-control")]),t._v(" 和 "),a("em",[t._v("Expires")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"expires"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[t._v("#")]),t._v(" "),a("em",[t._v("Expires")])]),t._v(" "),a("p",[t._v("这是 "),a("em",[t._v("HTTP 1.0")]),t._v(" 的字段，表示缓存到期时间，是一个绝对的时间 (当前时间+缓存时间)，如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Expires: Thu, 10 Nov 2017 08:45:11 GMT\n")])])]),a("p",[t._v("在响应消息头中，设置这个字段之后，就可以告诉浏览器，在未过期之前不需要再次请求。")]),t._v(" "),a("p",[t._v("但是，这个字段设置时有两个缺点：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("由于是绝对时间，用户可能会将客户端本地的时间进行修改，而导致浏览器判断缓存失效，重新请求该资源。此外，即使不考虑自行修改的因素，时差或者误差等因素也可能造成客户端与服务端的时间不一致，致使缓存失效。")])]),t._v(" "),a("li",[a("p",[t._v("写法太复杂了。表示时间的字符串多个空格，少个字母，都会导致变为非法属性从而设置失效。")])])]),t._v(" "),a("h4",{attrs:{id:"cache-control"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[t._v("#")]),t._v(" "),a("em",[t._v("Cache-control")])]),t._v(" "),a("p",[t._v("已知 "),a("em",[t._v("Expires")]),t._v(" 的缺点之后，在 "),a("em",[t._v("HTTP/1.1")]),t._v(" 中，增加了一个字段 "),a("em",[t._v("Cache-control")]),t._v("，该字段表示资源缓存的最大有效时间，在该时间内，客户端不需要向服务器发送请求")]),t._v(" "),a("p",[t._v("这两者的区别就是前者是绝对时间，而后者是相对时间。如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Cache-control: max-age=2592000\n")])])]),a("p",[t._v("下面列举一些 "),a("em",[t._v("Cache-control")]),t._v(" 字段常用的值：(完整的列表可以查看 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control",target:"_blank",rel:"noopener noreferrer"}},[a("em",[t._v("MDN")]),a("OutboundLink")],1),t._v(")")]),t._v(" "),a("ul",[a("li",[a("p",[a("em",[t._v("max-age")]),t._v("：即最大有效时间，在上面的例子中我们可以看到")])]),t._v(" "),a("li",[a("p",[a("em",[t._v("must-revalidate")]),t._v("：如果超过了 "),a("em",[t._v("max-age")]),t._v(" 的时间，浏览器必须向服务器发送请求，验证资源是否还有效。")])]),t._v(" "),a("li",[a("p",[a("em",[t._v("no-cache")]),t._v("：虽然字面意思是“不要缓存”，但实际上还是要求客户端缓存内容的，只是是否使用这个内容由后续的协商缓存来决定。")])]),t._v(" "),a("li",[a("p",[a("em",[t._v("no-store")]),t._v("：真正意义上的“不要缓存”。所有内容都不走缓存，包括强制缓存和协商缓存。")])]),t._v(" "),a("li",[a("p",[a("em",[t._v("public")]),t._v("：所有的内容都可以被缓存（包括客户端和代理服务器， 如 "),a("em",[t._v("CDN")]),t._v(" ）")])]),t._v(" "),a("li",[a("p",[a("em",[t._v("private")]),t._v("：所有的内容只有客户端才可以缓存，代理服务器不能缓存。默认值。")])])]),t._v(" "),a("p",[t._v("这些值可以混合使用，例如 "),a("em",[t._v("Cache-control:public, max-age=2592000")]),t._v("。在混合使用时，它们的优先级如下图：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-12-03-063734.png",alt:"image-20211203143733448"}}),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("max-age=0")]),t._v(" 和 "),a("em",[t._v("no-cache")]),t._v(" 等价吗？\n从规范的字面意思来说，"),a("em",[t._v("max-age")]),t._v(" 到期是 应该（ "),a("em",[t._v("SHOULD")]),t._v(" ）重新验证，而 "),a("em",[t._v("no-cache")]),t._v(" 是 必须（ "),a("em",[t._v("MUST")]),t._v(" ）重新验证。但实际情况以浏览器实现为准，大部分情况他们俩的行为还是一致的。（如果是 "),a("em",[t._v("max-age=0, must-revalidate")]),t._v(" 就和 "),a("em",[t._v("no-cache")]),t._v(" 等价了）")])]),t._v(" "),a("p",[t._v("在 "),a("em",[t._v("HTTP/1.1")]),t._v(" 之前，如果想使用 "),a("em",[t._v("no-cache")]),t._v("，通常是使用 "),a("em",[t._v("Pragma")]),t._v(" 字段，如 "),a("em",[t._v("Pragma: no-cache")]),t._v("（这也是 "),a("em",[t._v("Pragma")]),t._v(" 字段唯一的取值）。")]),t._v(" "),a("p",[t._v("但是这个字段只是浏览器约定俗成的实现，并没有确切规范，因此缺乏可靠性。它应该只作为一个兼容字段出现，在当前的网络环境下其实用处已经很小。")]),t._v(" "),a("p",[t._v("总结一下，自从 "),a("em",[t._v("HTTP/1.1")]),t._v(" 开始，"),a("em",[t._v("Expires")]),t._v(" 逐渐被 "),a("em",[t._v("Cache-control")]),t._v(" 取代。")]),t._v(" "),a("p",[a("em",[t._v("Cache-control")]),t._v(" 是一个相对时间，即使客户端时间发生改变，相对时间也不会随之改变，这样可以保持服务器和客户端的时间一致性。而且 "),a("em",[t._v("Cache-control")]),t._v(" 的可配置性比较强大。"),a("em",[t._v("Cache-control")]),t._v(" 的优先级高于 "),a("em",[t._v("Expires")]),t._v("。")]),t._v(" "),a("p",[t._v("为了兼容 "),a("em",[t._v("HTTP/1.0")]),t._v(" 和 "),a("em",[t._v("HTTP/1.1")]),t._v("，实际项目中两个字段我们都会设置。")]),t._v(" "),a("h3",{attrs:{id:"协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),a("p",[t._v("当强制缓存失效（超过规定时间）时，就需要使用协商缓存，由服务器决定缓存内容是否失效。")]),t._v(" "),a("p",[t._v("流程上说，浏览器先请求缓存数据库，返回一个缓存标识。之后浏览器拿这个标识和服务器通讯。如果缓存未失效，则返回 "),a("em",[t._v("HTTP")]),t._v(" 状态码 "),a("em",[t._v("304")]),t._v(" 表示继续使用，于是客户端继续使用缓存；")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-12-03-063801.png",alt:"image-20211203143800447"}}),t._v(" "),a("p",[t._v("如果失效，则返回新的数据和缓存规则，浏览器响应数据后，再把规则写入到缓存数据库。")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-12-03-063821.png",alt:"image-20211203143820739"}}),t._v(" "),a("p",[t._v("协商缓存在请求数上和没有缓存是一致的，但如果是 "),a("em",[t._v("304")]),t._v(" 的话，返回的仅仅是一个状态码而已，并没有实际的文件内容，因此 在响应体体积上的节省是它的优化点。")]),t._v(" "),a("p",[t._v("它的优化主要体现在“响应”上面通过减少响应体体积，来缩短网络传输时间。所以和强制缓存相比提升幅度较小，但总比没有缓存好。")]),t._v(" "),a("p",[t._v("协商缓存是可以和强制缓存一起使用的，作为在强制缓存失效后的一种后备方案。实际项目中他们也的确经常一同出现。")]),t._v(" "),a("p",[t._v("对比缓存有 "),a("em",[t._v("2")]),t._v(" 组字段（不是两个）：")]),t._v(" "),a("ul",[a("li",[a("p",[a("em",[t._v("Last-Modified & If-Modified-Since")])])]),t._v(" "),a("li",[a("p",[a("em",[t._v("Etag & If-None-Match")])])])]),t._v(" "),a("h4",{attrs:{id:"last-modified-if-modified-since"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-if-modified-since"}},[t._v("#")]),t._v(" "),a("em",[t._v("Last-Modified & If-Modified-Since")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("服务器通过 "),a("em",[t._v("Last-Modified")]),t._v(" 字段告知客户端，资源最后一次被修改的时间，例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Last-Modified: Mon, 10 Nov 2018 09:10:11 GMT\n")])])])]),t._v(" "),a("li",[a("p",[t._v("浏览器将这个值和内容一起记录在缓存数据库中。")])]),t._v(" "),a("li",[a("p",[t._v("下一次请求相同资源时时，浏览器从自己的缓存中找出“不确定是否过期的”缓存。因此在请求头中将上次的 "),a("em",[t._v("Last-Modified")]),t._v(" 的值写入到请求头的 "),a("em",[t._v("If-Modified-Since")]),t._v(" 字段")])]),t._v(" "),a("li",[a("p",[t._v("服务器会将 "),a("em",[t._v("If-Modified-Since")]),t._v(" 的值与 "),a("em",[t._v("Last-Modified")]),t._v(" 字段进行对比。如果相等，则表示未修改，响应 "),a("em",[t._v("304")]),t._v("；反之，则表示修改了，响应 "),a("em",[t._v("200")]),t._v(" 状态码，并返回数据。")])])]),t._v(" "),a("p",[t._v("但是他还是有一定缺陷的：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果资源更新的速度是秒以下单位，那么该缓存是不能被使用的，因为它的时间单位最低是秒。")])]),t._v(" "),a("li",[a("p",[t._v("如果文件是通过服务器动态生成的，那么该方法的更新时间永远是生成的时间，尽管文件可能没有变化，所以起不到缓存的作用。")])])]),t._v(" "),a("p",[t._v("因此在 "),a("em",[t._v("HTTP/1.1")]),t._v(" 出现了 "),a("em",[t._v("ETag")]),t._v(" 和 "),a("em",[t._v("If-None-Match")])]),t._v(" "),a("h4",{attrs:{id:"etag-if-none-match"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#etag-if-none-match"}},[t._v("#")]),t._v(" "),a("em",[t._v("Etag & If-None-Match")])]),t._v(" "),a("p",[t._v("为了解决上述问题，出现了一组新的字段 "),a("em",[t._v("Etag")]),t._v(" 和 "),a("em",[t._v("If-None-Match")]),t._v("。")]),t._v(" "),a("p",[a("em",[t._v("Etag")]),t._v(" 存储的是文件的特殊标识（一般都是一个 "),a("em",[t._v("Hash")]),t._v(" 值），服务器存储着文件的 "),a("em",[t._v("Etag")]),t._v(" 字段。")]),t._v(" "),a("p",[t._v("之后的流程和 "),a("em",[t._v("Last-Modified")]),t._v(" 一致，只是 "),a("em",[t._v("Last-Modified")]),t._v(" 字段和它所表示的更新时间改变成了 "),a("em",[t._v("Etag")]),t._v(" 字段和它所表示的文件 "),a("em",[t._v("hash")]),t._v("，把 "),a("em",[t._v("If-Modified-Since")]),t._v(" 变成了 "),a("em",[t._v("If-None-Match")]),t._v("。")]),t._v(" "),a("p",[t._v("浏览器在下一次加载资源向服务器发送请求时，会将上一次返回的 Etag 值放到请求头里的 "),a("em",[t._v("If-None-Match")]),t._v(" 里，服务器只需要比较客户端传来的 "),a("em",[t._v("If-None-Match")]),t._v(" 跟自己服务器上该资源的 "),a("em",[t._v("ETag")]),t._v(" 是否一致，就能很好地判断资源相对客户端而言是否被修改过了。")]),t._v(" "),a("p",[t._v("如果服务器发现 "),a("em",[t._v("ETag")]),t._v(" 匹配不上，那么直接以常规 "),a("em",[t._v("GET 200")]),t._v(" 回包形式将新的资源（当然也包括了新的 "),a("em",[t._v("ETag")]),t._v("）发给客户端；如果 "),a("em",[t._v("ETag")]),t._v(" 是一致的，则直接返回 "),a("em",[t._v("304")]),t._v(" 告诉客户端直接使用本地缓存即可。")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-12-03-063851.png",alt:"image-20211203143850009"}}),t._v(" "),a("p",[t._v("两者之间的简单对比：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("首先在精确度上，"),a("em",[t._v("Etag")]),t._v(" 要优于 "),a("em",[t._v("Last-Modified")]),t._v("。")]),t._v(" "),a("p",[a("em",[t._v("Last-Modified")]),t._v(" 的时间单位是秒，如果某个文件在 "),a("em",[t._v("1")]),t._v(" 秒内改变了多次，那么 "),a("em",[t._v("Last-Modified")]),t._v(" 其实并没有体现出来修改，但是 "),a("em",[t._v("Etag")]),t._v(" 是一个 "),a("em",[t._v("Hash")]),t._v(" 值，每次都会改变从而确保了精度。")])]),t._v(" "),a("li",[a("p",[t._v("第二在性能上，"),a("em",[t._v("Etag")]),t._v(" 要逊于 "),a("em",[t._v("Last-Modified")]),t._v("，毕竟 "),a("em",[t._v("Last-Modified")]),t._v(" 只需要记录时间，而 "),a("em",[t._v("Etag")]),t._v(" 需要服务器通过算法来计算出一个 "),a("em",[t._v("Hash")]),t._v(" 值。")])]),t._v(" "),a("li",[a("p",[t._v("第三在优先级上，服务器校验优先考虑 "),a("em",[t._v("Etag")]),t._v("，也就是说 "),a("em",[t._v("Etag")]),t._v(" 的优先级高于 "),a("em",[t._v("Last-Modified")]),t._v("。")])])]),t._v(" "),a("h2",{attrs:{id:"缓存读取规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存读取规则"}},[t._v("#")]),t._v(" 缓存读取规则")]),t._v(" "),a("p",[t._v("接下来我们来对上面所讲的缓存做一个总结。")]),t._v(" "),a("p",[t._v("当浏览器要请求资源时：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("从 "),a("em",[t._v("Service Worker")]),t._v(" 中获取内容（ 如果设置了 "),a("em",[t._v("Service Worker")]),t._v(" ）")])]),t._v(" "),a("li",[a("p",[t._v("查看 "),a("em",[t._v("Memory Cache")])])]),t._v(" "),a("li",[a("p",[t._v("查看 "),a("em",[t._v("Disk Cache")]),t._v("。这里又细分：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果有强制缓存且未失效，则使用强制缓存，不请求服务器。这时的状态码全部是 "),a("em",[t._v("200")])])]),t._v(" "),a("li",[a("p",[t._v("如果有强制缓存但已失效，使用协商缓存，比较后确定 "),a("em",[t._v("304")]),t._v(" 还是 "),a("em",[t._v("200")])])])])]),t._v(" "),a("li",[a("p",[t._v("发送网络请求，等待网络响应")])]),t._v(" "),a("li",[a("p",[t._v("把响应内容存入 "),a("em",[t._v("Disk Cache")]),t._v(" (如果 "),a("em",[t._v("HTTP")]),t._v(" 响应头信息有相应配置的话)")])]),t._v(" "),a("li",[a("p",[t._v("把响应内容的引用存入 "),a("em",[t._v("Memory Cache")]),t._v(" (无视 "),a("em",[t._v("HTTP")]),t._v(" 头信息的配置)")])]),t._v(" "),a("li",[a("p",[t._v("把响应内容存入 "),a("em",[t._v("Service Worker")]),t._v(" 的 "),a("em",[t._v("Cache Storage")]),t._v("（ 如果设置了 "),a("em",[t._v("Service Worker")]),t._v(" ）")])])]),t._v(" "),a("p",[t._v("其中针对第 "),a("em",[t._v("3")]),t._v(" 步，具体的流程图如下：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-12-03-063919.png",alt:"image-20211203143918845"}}),t._v(" "),a("h2",{attrs:{id:"浏览器行为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器行为"}},[t._v("#")]),t._v(" 浏览器行为")]),t._v(" "),a("p",[t._v("在了解了整个缓存策略或者说缓存读取流程后，我们还需要了解一个东西，那就是用户对浏览器的不同操作，会触发不同的缓存读取策略。")]),t._v(" "),a("p",[t._v("对应主要有 "),a("em",[t._v("3")]),t._v(" 种不同的浏览器行为：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("打开网页，地址栏输入地址：查找 "),a("em",[t._v("Disk Cache")]),t._v(" 中是否有匹配。如有则使用；如没有则发送网络请求。")])]),t._v(" "),a("li",[a("p",[t._v("普通刷新 (F5)：因为 TAB 并没有关闭，因此 "),a("em",[t._v("Memory Cache")]),t._v(" 是可用的，会被优先使用(如果匹配的话)。其次才是 "),a("em",[t._v("Disk Cache")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("强制刷新 ( "),a("em",[t._v("Ctrl + F5")]),t._v(" )：浏览器不使用缓存，因此发送的请求头部均带有 "),a("em",[t._v("Cache-control: no-cache")]),t._v("（为了兼容，还带了 "),a("em",[t._v("Pragma: no-cache")]),t._v(" ）。服务器直接返回 "),a("em",[t._v("200")]),t._v(" 和最新内容。")])])]),t._v(" "),a("h2",{attrs:{id:"实操案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实操案例"}},[t._v("#")]),t._v(" 实操案例")]),t._v(" "),a("p",[t._v("实践才是检验真理的唯一标准。上面已经将理论部分讲解完毕了，接下来我们就来用实际代码验证一下上面所讲的验证规则。")]),t._v(" "),a("p",[t._v("下面是使用 "),a("em",[t._v("Node.js")]),t._v(" 搭建的服务器：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" http "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" path "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'path'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hashStr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A hash string."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"crypto"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createHash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sha1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hashStr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("digest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'base64'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nhttp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" url "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取到请求的路径")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" fullPath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于拼接完整的路径")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'if-none-match'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeHead")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("304")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代表请求的是主页")]),t._v("\n        fullPath "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'static/html'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/index.html'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        fullPath "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"static"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeHead")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'Cache-Control'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'max-age=5'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"Etag"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" hash\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据完整的路径 使用fs模块来进行文件内容的读取 读取内容后将内容返回")]),t._v("\n    fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fullPath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读取文件成功，返回读取的内容，让浏览器进行解析")]),t._v("\n            res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"服务器已启动，监听 3000 端口..."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("在上面的代码中，我们使用 "),a("em",[t._v("Node.js")]),t._v(" 创建了一个服务器，根据请求头的 "),a("em",[t._v("if-none-match")]),t._v(" 字段接收从客户端传递过来的 "),a("em",[t._v("Etag")]),t._v(" 值，如果和当前的 "),a("em",[t._v("Hash")]),t._v(" 值相同，则返回 "),a("em",[t._v("304")]),t._v(" 的状态码。")]),t._v(" "),a("p",[t._v("在资源方面，我们除了主页没有设置缓存，其他静态资源我们设置了 "),a("em",[t._v("5")]),t._v(" 秒的缓存，并且设置了 "),a("em",[t._v("Etag")]),t._v(" 值。")]),t._v(" "),a("blockquote",[a("p",[t._v("注：上面的代码只是服务器部分代码，完整代码请参阅本章节所对应的代码。")])]),t._v(" "),a("p",[t._v("效果如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-12-03-063950.gif",alt:"2021-12-03 14.02.26"}})]),t._v(" "),a("p",[t._v("可以看到，第一次请求时因为没有缓存，所以全部都是从服务器上面获取资源，之后我们刷新页面，是从 "),a("em",[t._v("memory cache")]),t._v(" 中获取的资源，但是由于我们的强缓存只设置了 "),a("em",[t._v("5")]),t._v(" 秒，所以之后再次刷新页面，走的就是协商缓存，返回 "),a("em",[t._v("304")]),t._v(" 状态码。")]),t._v(" "),a("p",[t._v("但是在这个示例中，如果我们修改了服务器的静态资源，客户端是没办法实时的更新的，因为静态资源是直接返回的文件，只要静态资源的文件名没变，即使该资源的内容已经发生了变化，服务器也会认为资源没有变化。")]),t._v(" "),a("p",[t._v("那怎么解决呢？")]),t._v(" "),a("p",[t._v("解决办法也就是我们在做静态资源构建时，在打包完成的静态资源文件名上根据它内容 "),a("em",[t._v("Hash")]),t._v(" 值添加上一串 "),a("em",[t._v("Hash")]),t._v(" 码，这样在 "),a("em",[t._v("CSS")]),t._v(" 或者 "),a("em",[t._v("JS")]),t._v(" 文件内容没有变化时，生成的文件名也就没有变化，反映到页面上的话就是 "),a("em",[t._v("url")]),t._v(" 没有变化。")]),t._v(" "),a("p",[t._v("如果你的文件内容有变化，那么对应生成的文件名后面的 "),a("em",[t._v("Hash")]),t._v(" 值也会发生变化，那么嵌入到页面的文件 "),a("em",[t._v("url")]),t._v(" 也就会发生变化，从而可以达到一个更新缓存的目的。这也是为什么在使用 "),a("em",[t._v("webpack")]),t._v(" 等一些打包工具时，打包后的文件名后面会添加上一串 "),a("em",[t._v("Hash")]),t._v(" 码的原因。")]),t._v(" "),a("p",[t._v("目前来讲，这在前端开发中比较常见的一个静态资源缓存方案。")]),t._v(" "),a("h2",{attrs:{id:"缓存的最佳实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存的最佳实践"}},[t._v("#")]),t._v(" 缓存的最佳实践")]),t._v(" "),a("h3",{attrs:{id:"频繁变动的资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#频繁变动的资源"}},[t._v("#")]),t._v(" 频繁变动的资源")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Cache-Control: no-cache\n")])])]),a("p",[t._v("对于频繁变动的资源，首先需要使用 "),a("em",[t._v("Cache-Control: no-cache")]),t._v(" 使浏览器每次都请求服务器，然后配合 "),a("em",[t._v("ETag")]),t._v(" 或者 "),a("em",[t._v("Last-Modified")]),t._v(" 来验证资源是否有效。")]),t._v(" "),a("p",[t._v("这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。")]),t._v(" "),a("h3",{attrs:{id:"不常变化的资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不常变化的资源"}},[t._v("#")]),t._v(" 不常变化的资源")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Cache-Control: max-age=31536000\n")])])]),a("p",[t._v("通常在处理这类资源时，给它们的 "),a("em",[t._v("Cache-Control")]),t._v(" 配置一个很大的 "),a("em",[t._v("max-age=31536000")]),t._v(" (一年)，这样浏览器之后请求相同的 "),a("em",[t._v("URL")]),t._v(" 会命中强制缓存。")]),t._v(" "),a("p",[t._v("而为了解决更新的问题，就需要在文件名（或者路径）中添加 "),a("em",[t._v("Hash")]),t._v("， 版本号等动态字符，之后更改动态字符，从而达到更改引用 "),a("em",[t._v("URL")]),t._v(" 的目的，让之前的强制缓存失效 (其实并未立即失效，只是不再使用了而已)。")]),t._v(" "),a("p",[t._v("在线提供的类库（如 "),a("em",[t._v("jquery-3.3.1.min.js、lodash.min.js")]),t._v(" 等）均采用这个模式。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("-"),a("em",[t._v("EOF")]),t._v("-")])])}),[],!1,null,null,null);a.default=s.exports}}]);