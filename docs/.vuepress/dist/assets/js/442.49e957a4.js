(window.webpackJsonp=window.webpackJsonp||[]).push([[442],{811:function(t,a,v){"use strict";v.r(a);var _=v(10),s=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"原始类型包装器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原始类型包装器"}},[t._v("#")]),t._v(" 原始类型包装器")]),t._v(" "),a("ul",[a("li",[t._v("new 包装器(值)：返回的是一个对象")]),t._v(" "),a("li",[t._v("包装器(值)：返回的是一个原始类型")])]),t._v(" "),a("h2",{attrs:{id:"number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[t._v("#")]),t._v(" Number")]),t._v(" "),a("h3",{attrs:{id:"静态成员"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态成员"}},[t._v("#")]),t._v(" 静态成员")]),t._v(" "),a("ul",[a("li",[t._v("isNaN")]),t._v(" "),a("li",[t._v("isFinite")]),t._v(" "),a("li",[t._v("isInteger：判断一个数据是否是整数")]),t._v(" "),a("li",[t._v("parseFloat: 将一个数据转换为小数")]),t._v(" "),a("li",[t._v("parseInt：将以一个数据转换为整数，直接舍去小数部分")])]),t._v(" "),a("p",[t._v("parseInt、parseFloat要求参数是一个字符串，如果不是字符串，则会先转换为字符串。\n从字符串开始位置进行查找，找到第一个有效的数字进行转换，如果没有找到，则返回NaN，左右空白字符会忽略")]),t._v(" "),a("p",[t._v("parseInt，可以传入第二个参数，表示将给定的字符串，识别为多少进制。")]),t._v(" "),a("h3",{attrs:{id:"实例成员"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例成员"}},[t._v("#")]),t._v(" 实例成员")]),t._v(" "),a("ul",[a("li",[t._v("toFixed方法：会有四舍五入")]),t._v(" "),a("li",[t._v("toPrecision：以指定的精度返回一个数字字符串")])]),t._v(" "),a("h2",{attrs:{id:"boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean"}},[t._v("#")]),t._v(" Boolean")]),t._v(" "),a("h2",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),a("h3",{attrs:{id:"静态成员-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态成员-2"}},[t._v("#")]),t._v(" 静态成员")]),t._v(" "),a("ul",[a("li",[t._v("fromCharCode：通过unicode编码创建字符串")])]),t._v(" "),a("h3",{attrs:{id:"实例成员-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例成员-2"}},[t._v("#")]),t._v(" 实例成员")]),t._v(" "),a("ul",[a("li",[t._v("length：字符串长度")])]),t._v(" "),a("p",[t._v("字符串是一个伪数组")]),t._v(" "),a("ul",[a("li",[t._v("charAt：得到指定位置的字符")]),t._v(" "),a("li",[t._v("charCodeAt")]),t._v(" "),a("li",[t._v("concat")]),t._v(" "),a("li",[t._v("includes")]),t._v(" "),a("li",[t._v("endsWith")]),t._v(" "),a("li",[t._v("startsWith")]),t._v(" "),a("li",[t._v("indexOf")]),t._v(" "),a("li",[t._v("lastIndexOf")]),t._v(" "),a("li",[t._v("padStart")]),t._v(" "),a("li",[t._v("padEnd")]),t._v(" "),a("li",[t._v("repeat")]),t._v(" "),a("li",[t._v("slice：从某个位置取到某个位置；位置可以是负数；")]),t._v(" "),a("li",[t._v("substr: 从某个位置开始取，取指定的长度；位置可以是负数；")]),t._v(" "),a("li",[t._v("substring：从某个位置取到某个位置；不可以是负数；参数位置是可调换的。")]),t._v(" "),a("li",[t._v("toLowerCase")]),t._v(" "),a("li",[t._v("toUpperCase")]),t._v(" "),a("li",[t._v("split：分割字符串")])])])}),[],!1,null,null,null);a.default=s.exports}}]);